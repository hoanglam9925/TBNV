/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "rc522.h"
#include "string.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
uint8_t u8UARTdataTx[11];
uint8_t u8UARTdataRx[11];

uint8_t u8SPIdataTx[15];
uint8_t u8SPIdataRx[15];

uint8_t authFirst = 0;
uint8_t u8Counter = 0;
uint8_t u8Device = '0';
char * devicetemp;

uint8_t u8LMdata[4] = "0000";
uint8_t u8CmdLED[3];

unsigned char CardID[5];
unsigned char MyID[5] = {0x07, 0x39, 0xB9, 0x3B, 0xBC};
unsigned char MyID2[5] = {0xB7, 0x2A, 0x9F, 0x4B, 0x49};
unsigned char MyID3[5] = {0x8A, 0x27, 0xEA, 0x80, 0xC7};
uint8_t auth[1] = "0";
uint8_t u8AuthCommand = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI2_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_TIM2_Init(void);
static void MX_SPI1_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
void RxSPISetup();
void TxSPISetup(uint8_t device, uint8_t* data,uint8_t typeofcommand);
void TxUARTSetup(char *device, uint8_t* data);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == huart3.Instance)
	{
		//0 1 2 6
		//Phân tích xem truy�?n dữ liệu xuống cho thiết bị nào
		if(u8UARTdataRx[0] == '*' && u8UARTdataRx[8] == '#')
		{
			//Do khong truyen du lieu toi S1 nen khong viet
			if(u8UARTdataRx[1] == 'A' && u8UARTdataRx[2] == '1')
			{
				u8Device = '1';
			}
			else if(u8UARTdataRx[1] == 'A' && u8UARTdataRx[2] == '2')
			{
				u8Device = '2';
			}
			else if(u8UARTdataRx[1] == 'R' && u8UARTdataRx[2] == '1')
			{
				u8Device = '3';
			}
			else
			{
				u8Device = '0';
			}
		}
		//Nếu dữ liệu có dạng MD thì gửi dữ liệu xuống đi�?u khiển LED
		if(u8UARTdataRx[3] == 'S' && u8UARTdataRx[4] == 'W')
		{
			u8CmdLED[0] = u8UARTdataRx[6];
			u8CmdLED[1] = u8UARTdataRx[7];
			TxSPISetup(u8Device, u8CmdLED, 'S');
			if(u8Device == '1')
			{
				HAL_GPIO_WritePin(Slave1_GPIO_Port, Slave1_Pin, 0);
				HAL_SPI_Transmit(&hspi2, u8SPIdataTx, 10, 100);
				HAL_GPIO_WritePin(Slave1_GPIO_Port, Slave1_Pin, 1);
				HAL_GPIO_WritePin(Slave1_GPIO_Port, Slave1_Pin, 0);
				HAL_SPI_Transmit(&hspi2, u8SPIdataTx, 10, 100);
				HAL_GPIO_WritePin(Slave1_GPIO_Port, Slave1_Pin, 1);

			}
			else if(u8Device == '2')
			{
				//Gửi 2 lần để đảm bảo tín hiệu qua đầy đủ (kh�?i bấm 2 lần)
				HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 0);
				HAL_SPI_Transmit(&hspi2, u8SPIdataTx, 10, 100);
				HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 1);
				HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 0);
				HAL_SPI_Transmit(&hspi2, u8SPIdataTx, 10, 100);
				HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 1);
			}
		}
		/*************************************************************/
		else if(u8UARTdataRx[3] == 'P' && u8UARTdataRx[4] == 'W')
		{
			u8CmdLED[0] = u8UARTdataRx[5];
			u8CmdLED[1] = u8UARTdataRx[6];
			u8CmdLED[2] = u8UARTdataRx[7];
			TxSPISetup(u8Device, u8CmdLED, 'P');
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 0);
			HAL_SPI_Transmit(&hspi2, u8SPIdataTx, 10, 100);
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 1);
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 0);
			HAL_SPI_Transmit(&hspi2, u8SPIdataTx, 10, 100);
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 1);
		}
		else if(u8UARTdataRx[3] == 'R' && u8UARTdataRx[4] == 'F')
		{
			u8AuthCommand = u8UARTdataRx[7];
			TxUARTSetup("A1",u8LMdata);
			HAL_UART_Transmit_IT(&huart3, u8UARTdataTx, 11);
//			TxSPISetup('2', u8LMdata, 'M');
//			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 0);
//			HAL_SPI_Transmit(&hspi2, u8SPIdataTx, 10, 1);
//			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 1);

		}
	}
	HAL_UART_Receive_IT(&huart3, u8UARTdataRx, 9);
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == htim2.Instance)
	{
		u8Counter++;
//		if(u8Counter == 99)
//		{
//			TxUARTSetup("MA",(uint8_t *) "1");
//			HAL_UART_Transmit_IT(&huart3, u8UARTdataTx, 8);
//		}
		if(u8Counter == 50)
		{
			u8Counter = 0;
			HAL_GPIO_WritePin(Slave1_GPIO_Port, Slave1_Pin, 0);
			HAL_SPI_TransmitReceive(&hspi2, u8SPIdataTx, u8SPIdataRx, 11, 100);
			HAL_GPIO_WritePin(Slave1_GPIO_Port, Slave1_Pin, 1);
			RxSPISetup();
			TxUARTSetup("A1",u8LMdata);
			HAL_UART_Transmit_IT(&huart3, u8UARTdataTx, 11);
			TxSPISetup('2', u8LMdata, 'M');
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 0);
			HAL_SPI_Transmit(&hspi2, u8SPIdataTx, 10, 1);
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 1);


		}
//		else if(u8Counter == 103)
//		{
//			u8Counter = 0;
//			TxUARTSetup("MA",(uint8_t *) "0");
//			HAL_UART_Transmit_IT(&huart3, u8UARTdataTx, 8);
//		}
	}
}
void TxUARTSetup(char *device, uint8_t* data)
{
	if(strcmp(device, "A1") == 0)
	{
		u8UARTdataTx[0] = '*';
		u8UARTdataTx[1] = 'A';
		u8UARTdataTx[2] = '1';
		u8UARTdataTx[3] = 'L';
		u8UARTdataTx[4] = 'M';
		u8UARTdataTx[5] = data[0];
		u8UARTdataTx[6] = data[1];
		u8UARTdataTx[7] = data[2];
		u8UARTdataTx[8] = data[3];
		u8UARTdataTx[9] = '#';
		u8UARTdataTx[10] = '\n';
	}
	else if(strcmp(device, "R1") == 0)
	{
		u8UARTdataTx[0] = '*';
		u8UARTdataTx[1] = 'R';
		u8UARTdataTx[2] = '1';
		u8UARTdataTx[3] = 'R';
		u8UARTdataTx[4] = 'F';
		u8UARTdataTx[5] = data[0];
		u8UARTdataTx[6] = '#';
		u8UARTdataTx[7] = '\n';

	}
/******************************************************/
	else if(strcmp(device, "MA") == 0) //Master
	{
		u8UARTdataTx[0] = '*';
		u8UARTdataTx[1] = 'M';
		u8UARTdataTx[2] = 'A';
		u8UARTdataTx[3] = 'D'; //delay
		u8UARTdataTx[4] = 'L';
		u8UARTdataTx[5] = data[0];
		u8UARTdataTx[6] = '#';
		u8UARTdataTx[7] = '\n';
	}
}
void TxSPISetup(uint8_t device, uint8_t* data,uint8_t typeofcommand)
{
	if(typeofcommand == 'S')//SWITCH
	{
		u8SPIdataTx[0] = '*';
		u8SPIdataTx[3] = 'L';
		u8SPIdataTx[4] = 'S';
		u8SPIdataTx[5] = 'W';
		u8SPIdataTx[6] = 'L';
		u8SPIdataTx[7] = data[0];
		u8SPIdataTx[8] = data[1];
		u8SPIdataTx[9] = '#';


		if(device == '1')
		{
			u8SPIdataTx[1] = 'A';
			u8SPIdataTx[2] = '1';
		}
		else if(device == '2')
		{
			u8SPIdataTx[1] = 'A';
			u8SPIdataTx[2] = '2';
		}

	}
	else if(typeofcommand == 'P') //PWM
	{
		u8SPIdataTx[0] = '*';
		u8SPIdataTx[3] = 'L';
		u8SPIdataTx[4] = 'P';
		u8SPIdataTx[5] = 'W';
		u8SPIdataTx[6] = data[0];
		u8SPIdataTx[7] = data[1];
		u8SPIdataTx[8] = data[2];
		u8SPIdataTx[9] = '#';
		if(device == '1')
		{
			u8SPIdataTx[1] = 'A';
			u8SPIdataTx[2] = '1';
		}
		else if(device == '2')
		{
			u8SPIdataTx[1] = 'A';
			u8SPIdataTx[2] = '2';
		}

	}
	else if(typeofcommand == 'R')//RF
	{
		u8SPIdataTx[0] = '*';
		u8SPIdataTx[1] = 'A';
		u8SPIdataTx[2] = '2';
		u8SPIdataTx[3] = 'R';
		u8SPIdataTx[4] = 'F';
		u8SPIdataTx[5] = 'A';
		u8SPIdataTx[6] = 'T';
		u8SPIdataTx[7] = '0';
		u8SPIdataTx[8] = data[0];
		u8SPIdataTx[9] = '#';
	}
	else
	{
		u8SPIdataTx[0] = '*';
		u8SPIdataTx[1] = 'A';
		u8SPIdataTx[2] = '2';
		u8SPIdataTx[3] = 'L';
		u8SPIdataTx[4] = 'M';
		u8SPIdataTx[9] = '#';
		if(device == '2')
		{
			u8SPIdataTx[5] = data[0];
			u8SPIdataTx[6] = data[1];
			u8SPIdataTx[7] = data[2];
			u8SPIdataTx[8] = data[3];
		}
	}

}
void RxSPISetup()
{
	if(u8SPIdataRx[0] == '*' && u8SPIdataRx[9] == '#')
	{
		u8LMdata[0] = u8SPIdataRx[5];
		u8LMdata[1] = u8SPIdataRx[6];
		u8LMdata[2] = u8SPIdataRx[7];
		u8LMdata[3] = u8SPIdataRx[8];
	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI2_Init();
  MX_USART3_UART_Init();
  MX_TIM2_Init();
  MX_SPI1_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
  /* USER CODE BEGIN 2 */
  HAL_SPI_Init(&hspi1);
  HAL_SPI_Init(&hspi2);
  HAL_UART_Init(&huart3);
  //HAL_TIM_Base_Init(&htim2);
  HAL_TIM_Base_Start_IT(&htim2);
  MFRC522_Init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart3, u8UARTdataRx, 9);
  while (1)
  {
	  if(u8AuthCommand == '1')
	  {
		  if (MFRC522_Check(CardID) == MI_OK)
		  {
			if (MFRC522_Compare(CardID, MyID) == MI_OK )
			{
				auth[0] = '1';
				TxUARTSetup("R1", auth);
				HAL_UART_Transmit_IT(&huart3, u8UARTdataTx, 8);
				//TxSPISetup(u8Device, (uint8_t *) "1", 'R');
				authFirst = 0;
			}
			else if (MFRC522_Compare(CardID, MyID2) == MI_OK)
			{
				auth[0] = '2';
				TxUARTSetup("R1", auth);
				HAL_UART_Transmit_IT(&huart3, u8UARTdataTx, 8);
				//TxSPISetup(u8Device, (uint8_t *) "2", 'R');
				authFirst = 0;
			}
			else if (MFRC522_Compare(CardID, MyID3) == MI_OK)
			{
				auth[0] = '3';
				TxUARTSetup("R1", auth);
				HAL_UART_Transmit_IT(&huart3, u8UARTdataTx, 8);
				//TxSPISetup(u8Device, (uint8_t *) "3", 'R');
			}
			else
			{
				TxSPISetup(u8Device, (uint8_t *) "0", 'R');
			}
//			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 0);
//			HAL_SPI_Transmit(&hspi2, u8SPIdataTx, 10, 100);
//			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 1);
//			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 0);
//			HAL_SPI_Transmit(&hspi2, u8SPIdataTx, 10, 100);
//			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 1);
		  }

	  }
	  else if((u8AuthCommand == '2' || u8AuthCommand == '0') && authFirst == 0)
	  {
		  	authFirst = 1;
			TxSPISetup(u8Device, (uint8_t *) "1", 'R');
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 0);
			HAL_SPI_Transmit(&hspi2, u8SPIdataTx, 10, 100);
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 1);
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 0);
			HAL_SPI_Transmit(&hspi2, u8SPIdataTx, 10, 100);
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 1);
	  }
	  else if(u8AuthCommand == '3' && authFirst == 0)
	  {
		    authFirst = 1;
			TxSPISetup(u8Device, (uint8_t *) "0", 'R');
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 0);
			HAL_SPI_Transmit(&hspi2, u8SPIdataTx, 10, 100);
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 1);
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 0);
			HAL_SPI_Transmit(&hspi2, u8SPIdataTx, 10, 100);
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 1);
	  }
	  HAL_Delay(10);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* SPI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 35999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 199;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Slave1_Pin|Slave2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : Slave1_Pin Slave2_Pin */
  GPIO_InitStruct.Pin = Slave1_Pin|Slave2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
