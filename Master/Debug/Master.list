
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003d1c  08003d1c  00013d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d4c  08003d4c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08003d4c  08003d4c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d4c  08003d4c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d4c  08003d4c  00013d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d50  08003d50  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08003d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000028  08003d7c  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08003d7c  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de7a  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa1  00000000  00000000  0002decb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  0002fe70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00030cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bcc  00000000  00000000  00031a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8c2  00000000  00000000  00049664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b80a  00000000  00000000  00057f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3730  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d40  00000000  00000000  000e3784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d04 	.word	0x08003d04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08003d04 	.word	0x08003d04

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart3.Instance)
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	681a      	ldr	r2, [r3, #0]
 800016c:	4b73      	ldr	r3, [pc, #460]	; (800033c <HAL_UART_RxCpltCallback+0x1dc>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	429a      	cmp	r2, r3
 8000172:	f040 80da 	bne.w	800032a <HAL_UART_RxCpltCallback+0x1ca>
	{
		//0 1 2 6
		//Phân tích xem truy�?n dữ liệu xuống cho thiết bị nào
		if(u8_uart_rx[0] == 'S' && u8_uart_rx[6] == 'E')
 8000176:	4b72      	ldr	r3, [pc, #456]	; (8000340 <HAL_UART_RxCpltCallback+0x1e0>)
 8000178:	781b      	ldrb	r3, [r3, #0]
 800017a:	2b53      	cmp	r3, #83	; 0x53
 800017c:	d12a      	bne.n	80001d4 <HAL_UART_RxCpltCallback+0x74>
 800017e:	4b70      	ldr	r3, [pc, #448]	; (8000340 <HAL_UART_RxCpltCallback+0x1e0>)
 8000180:	799b      	ldrb	r3, [r3, #6]
 8000182:	2b45      	cmp	r3, #69	; 0x45
 8000184:	d126      	bne.n	80001d4 <HAL_UART_RxCpltCallback+0x74>
		{
			//Do khong truyen du lieu toi S1 nen khong viet
			if(u8_uart_rx[1] == 'M' && u8_uart_rx[2] == '1')
 8000186:	4b6e      	ldr	r3, [pc, #440]	; (8000340 <HAL_UART_RxCpltCallback+0x1e0>)
 8000188:	785b      	ldrb	r3, [r3, #1]
 800018a:	2b4d      	cmp	r3, #77	; 0x4d
 800018c:	d107      	bne.n	800019e <HAL_UART_RxCpltCallback+0x3e>
 800018e:	4b6c      	ldr	r3, [pc, #432]	; (8000340 <HAL_UART_RxCpltCallback+0x1e0>)
 8000190:	789b      	ldrb	r3, [r3, #2]
 8000192:	2b31      	cmp	r3, #49	; 0x31
 8000194:	d103      	bne.n	800019e <HAL_UART_RxCpltCallback+0x3e>
			{
				u8_device = '1';
 8000196:	4b6b      	ldr	r3, [pc, #428]	; (8000344 <HAL_UART_RxCpltCallback+0x1e4>)
 8000198:	2231      	movs	r2, #49	; 0x31
 800019a:	701a      	strb	r2, [r3, #0]
 800019c:	e01a      	b.n	80001d4 <HAL_UART_RxCpltCallback+0x74>
			}
			else if(u8_uart_rx[1] == 'M' && u8_uart_rx[2] == '2')
 800019e:	4b68      	ldr	r3, [pc, #416]	; (8000340 <HAL_UART_RxCpltCallback+0x1e0>)
 80001a0:	785b      	ldrb	r3, [r3, #1]
 80001a2:	2b4d      	cmp	r3, #77	; 0x4d
 80001a4:	d107      	bne.n	80001b6 <HAL_UART_RxCpltCallback+0x56>
 80001a6:	4b66      	ldr	r3, [pc, #408]	; (8000340 <HAL_UART_RxCpltCallback+0x1e0>)
 80001a8:	789b      	ldrb	r3, [r3, #2]
 80001aa:	2b32      	cmp	r3, #50	; 0x32
 80001ac:	d103      	bne.n	80001b6 <HAL_UART_RxCpltCallback+0x56>
			{
				u8_device = '2';
 80001ae:	4b65      	ldr	r3, [pc, #404]	; (8000344 <HAL_UART_RxCpltCallback+0x1e4>)
 80001b0:	2232      	movs	r2, #50	; 0x32
 80001b2:	701a      	strb	r2, [r3, #0]
 80001b4:	e00e      	b.n	80001d4 <HAL_UART_RxCpltCallback+0x74>
			}
			else if(u8_uart_rx[1] == 'S' && u8_uart_rx[2] == '1')
 80001b6:	4b62      	ldr	r3, [pc, #392]	; (8000340 <HAL_UART_RxCpltCallback+0x1e0>)
 80001b8:	785b      	ldrb	r3, [r3, #1]
 80001ba:	2b53      	cmp	r3, #83	; 0x53
 80001bc:	d107      	bne.n	80001ce <HAL_UART_RxCpltCallback+0x6e>
 80001be:	4b60      	ldr	r3, [pc, #384]	; (8000340 <HAL_UART_RxCpltCallback+0x1e0>)
 80001c0:	789b      	ldrb	r3, [r3, #2]
 80001c2:	2b31      	cmp	r3, #49	; 0x31
 80001c4:	d103      	bne.n	80001ce <HAL_UART_RxCpltCallback+0x6e>
			{
				u8_device = '3';
 80001c6:	4b5f      	ldr	r3, [pc, #380]	; (8000344 <HAL_UART_RxCpltCallback+0x1e4>)
 80001c8:	2233      	movs	r2, #51	; 0x33
 80001ca:	701a      	strb	r2, [r3, #0]
 80001cc:	e002      	b.n	80001d4 <HAL_UART_RxCpltCallback+0x74>
			}
			else
			{
				u8_device = '0';
 80001ce:	4b5d      	ldr	r3, [pc, #372]	; (8000344 <HAL_UART_RxCpltCallback+0x1e4>)
 80001d0:	2230      	movs	r2, #48	; 0x30
 80001d2:	701a      	strb	r2, [r3, #0]
			}
		}
		//Nếu dữ liệu có dạng MD thì gửi dữ liệu xuống đi�?u khiển LED
		if(u8_uart_rx[3] == 'M' && u8_uart_rx[4] == 'D')
 80001d4:	4b5a      	ldr	r3, [pc, #360]	; (8000340 <HAL_UART_RxCpltCallback+0x1e0>)
 80001d6:	78db      	ldrb	r3, [r3, #3]
 80001d8:	2b4d      	cmp	r3, #77	; 0x4d
 80001da:	d160      	bne.n	800029e <HAL_UART_RxCpltCallback+0x13e>
 80001dc:	4b58      	ldr	r3, [pc, #352]	; (8000340 <HAL_UART_RxCpltCallback+0x1e0>)
 80001de:	791b      	ldrb	r3, [r3, #4]
 80001e0:	2b44      	cmp	r3, #68	; 0x44
 80001e2:	d15c      	bne.n	800029e <HAL_UART_RxCpltCallback+0x13e>
		{
			u8_modeLed[0] = u8_uart_rx[5];
 80001e4:	4b56      	ldr	r3, [pc, #344]	; (8000340 <HAL_UART_RxCpltCallback+0x1e0>)
 80001e6:	795a      	ldrb	r2, [r3, #5]
 80001e8:	4b57      	ldr	r3, [pc, #348]	; (8000348 <HAL_UART_RxCpltCallback+0x1e8>)
 80001ea:	701a      	strb	r2, [r3, #0]
			TxSPISetup(u8_device, u8_modeLed, 'C');
 80001ec:	4b55      	ldr	r3, [pc, #340]	; (8000344 <HAL_UART_RxCpltCallback+0x1e4>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	2243      	movs	r2, #67	; 0x43
 80001f2:	4955      	ldr	r1, [pc, #340]	; (8000348 <HAL_UART_RxCpltCallback+0x1e8>)
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 f973 	bl	80004e0 <TxSPISetup>
			if(u8_device == '1')
 80001fa:	4b52      	ldr	r3, [pc, #328]	; (8000344 <HAL_UART_RxCpltCallback+0x1e4>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b31      	cmp	r3, #49	; 0x31
 8000200:	d124      	bne.n	800024c <HAL_UART_RxCpltCallback+0xec>
			{
				HAL_GPIO_WritePin(Slave1_GPIO_Port, Slave1_Pin, 0);
 8000202:	2200      	movs	r2, #0
 8000204:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000208:	4850      	ldr	r0, [pc, #320]	; (800034c <HAL_UART_RxCpltCallback+0x1ec>)
 800020a:	f001 fc5f 	bl	8001acc <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi2, u8_spi_tx, 10, 1);
 800020e:	2301      	movs	r3, #1
 8000210:	220a      	movs	r2, #10
 8000212:	494f      	ldr	r1, [pc, #316]	; (8000350 <HAL_UART_RxCpltCallback+0x1f0>)
 8000214:	484f      	ldr	r0, [pc, #316]	; (8000354 <HAL_UART_RxCpltCallback+0x1f4>)
 8000216:	f002 f929 	bl	800246c <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(Slave1_GPIO_Port, Slave1_Pin, 1);
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000220:	484a      	ldr	r0, [pc, #296]	; (800034c <HAL_UART_RxCpltCallback+0x1ec>)
 8000222:	f001 fc53 	bl	8001acc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Slave1_GPIO_Port, Slave1_Pin, 0);
 8000226:	2200      	movs	r2, #0
 8000228:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800022c:	4847      	ldr	r0, [pc, #284]	; (800034c <HAL_UART_RxCpltCallback+0x1ec>)
 800022e:	f001 fc4d 	bl	8001acc <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi2, u8_spi_tx, 10, 1);
 8000232:	2301      	movs	r3, #1
 8000234:	220a      	movs	r2, #10
 8000236:	4946      	ldr	r1, [pc, #280]	; (8000350 <HAL_UART_RxCpltCallback+0x1f0>)
 8000238:	4846      	ldr	r0, [pc, #280]	; (8000354 <HAL_UART_RxCpltCallback+0x1f4>)
 800023a:	f002 f917 	bl	800246c <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(Slave1_GPIO_Port, Slave1_Pin, 1);
 800023e:	2201      	movs	r2, #1
 8000240:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000244:	4841      	ldr	r0, [pc, #260]	; (800034c <HAL_UART_RxCpltCallback+0x1ec>)
 8000246:	f001 fc41 	bl	8001acc <HAL_GPIO_WritePin>
			if(u8_device == '1')
 800024a:	e06d      	b.n	8000328 <HAL_UART_RxCpltCallback+0x1c8>
			}
			else if(u8_device == '2')
 800024c:	4b3d      	ldr	r3, [pc, #244]	; (8000344 <HAL_UART_RxCpltCallback+0x1e4>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2b32      	cmp	r3, #50	; 0x32
 8000252:	d169      	bne.n	8000328 <HAL_UART_RxCpltCallback+0x1c8>
			{
				//Gửi 2 lần để đảm bảo tín hiệu qua đầy đủ (kh�?i bấm 2 lần)
				HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 0);
 8000254:	2200      	movs	r2, #0
 8000256:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800025a:	483c      	ldr	r0, [pc, #240]	; (800034c <HAL_UART_RxCpltCallback+0x1ec>)
 800025c:	f001 fc36 	bl	8001acc <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi2, u8_spi_tx, 10, 100);
 8000260:	2364      	movs	r3, #100	; 0x64
 8000262:	220a      	movs	r2, #10
 8000264:	493a      	ldr	r1, [pc, #232]	; (8000350 <HAL_UART_RxCpltCallback+0x1f0>)
 8000266:	483b      	ldr	r0, [pc, #236]	; (8000354 <HAL_UART_RxCpltCallback+0x1f4>)
 8000268:	f002 f900 	bl	800246c <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 1);
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000272:	4836      	ldr	r0, [pc, #216]	; (800034c <HAL_UART_RxCpltCallback+0x1ec>)
 8000274:	f001 fc2a 	bl	8001acc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 0);
 8000278:	2200      	movs	r2, #0
 800027a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800027e:	4833      	ldr	r0, [pc, #204]	; (800034c <HAL_UART_RxCpltCallback+0x1ec>)
 8000280:	f001 fc24 	bl	8001acc <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi2, u8_spi_tx, 10, 100);
 8000284:	2364      	movs	r3, #100	; 0x64
 8000286:	220a      	movs	r2, #10
 8000288:	4931      	ldr	r1, [pc, #196]	; (8000350 <HAL_UART_RxCpltCallback+0x1f0>)
 800028a:	4832      	ldr	r0, [pc, #200]	; (8000354 <HAL_UART_RxCpltCallback+0x1f4>)
 800028c:	f002 f8ee 	bl	800246c <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 1);
 8000290:	2201      	movs	r2, #1
 8000292:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000296:	482d      	ldr	r0, [pc, #180]	; (800034c <HAL_UART_RxCpltCallback+0x1ec>)
 8000298:	f001 fc18 	bl	8001acc <HAL_GPIO_WritePin>
			if(u8_device == '1')
 800029c:	e044      	b.n	8000328 <HAL_UART_RxCpltCallback+0x1c8>
			}
		}
		else if(u8_uart_rx[3] == 'P' && u8_uart_rx[4] == 'W')
 800029e:	4b28      	ldr	r3, [pc, #160]	; (8000340 <HAL_UART_RxCpltCallback+0x1e0>)
 80002a0:	78db      	ldrb	r3, [r3, #3]
 80002a2:	2b50      	cmp	r3, #80	; 0x50
 80002a4:	d133      	bne.n	800030e <HAL_UART_RxCpltCallback+0x1ae>
 80002a6:	4b26      	ldr	r3, [pc, #152]	; (8000340 <HAL_UART_RxCpltCallback+0x1e0>)
 80002a8:	791b      	ldrb	r3, [r3, #4]
 80002aa:	2b57      	cmp	r3, #87	; 0x57
 80002ac:	d12f      	bne.n	800030e <HAL_UART_RxCpltCallback+0x1ae>
		{
			u8_modeLed[0] = u8_uart_rx[5];
 80002ae:	4b24      	ldr	r3, [pc, #144]	; (8000340 <HAL_UART_RxCpltCallback+0x1e0>)
 80002b0:	795a      	ldrb	r2, [r3, #5]
 80002b2:	4b25      	ldr	r3, [pc, #148]	; (8000348 <HAL_UART_RxCpltCallback+0x1e8>)
 80002b4:	701a      	strb	r2, [r3, #0]
			TxSPISetup(u8_device, u8_modeLed, 'P');
 80002b6:	4b23      	ldr	r3, [pc, #140]	; (8000344 <HAL_UART_RxCpltCallback+0x1e4>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2250      	movs	r2, #80	; 0x50
 80002bc:	4922      	ldr	r1, [pc, #136]	; (8000348 <HAL_UART_RxCpltCallback+0x1e8>)
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 f90e 	bl	80004e0 <TxSPISetup>
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 0);
 80002c4:	2200      	movs	r2, #0
 80002c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ca:	4820      	ldr	r0, [pc, #128]	; (800034c <HAL_UART_RxCpltCallback+0x1ec>)
 80002cc:	f001 fbfe 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, u8_spi_tx, 10, 100);
 80002d0:	2364      	movs	r3, #100	; 0x64
 80002d2:	220a      	movs	r2, #10
 80002d4:	491e      	ldr	r1, [pc, #120]	; (8000350 <HAL_UART_RxCpltCallback+0x1f0>)
 80002d6:	481f      	ldr	r0, [pc, #124]	; (8000354 <HAL_UART_RxCpltCallback+0x1f4>)
 80002d8:	f002 f8c8 	bl	800246c <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 1);
 80002dc:	2201      	movs	r2, #1
 80002de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002e2:	481a      	ldr	r0, [pc, #104]	; (800034c <HAL_UART_RxCpltCallback+0x1ec>)
 80002e4:	f001 fbf2 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 0);
 80002e8:	2200      	movs	r2, #0
 80002ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ee:	4817      	ldr	r0, [pc, #92]	; (800034c <HAL_UART_RxCpltCallback+0x1ec>)
 80002f0:	f001 fbec 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, u8_spi_tx, 10, 100);
 80002f4:	2364      	movs	r3, #100	; 0x64
 80002f6:	220a      	movs	r2, #10
 80002f8:	4915      	ldr	r1, [pc, #84]	; (8000350 <HAL_UART_RxCpltCallback+0x1f0>)
 80002fa:	4816      	ldr	r0, [pc, #88]	; (8000354 <HAL_UART_RxCpltCallback+0x1f4>)
 80002fc:	f002 f8b6 	bl	800246c <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 1);
 8000300:	2201      	movs	r2, #1
 8000302:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000306:	4811      	ldr	r0, [pc, #68]	; (800034c <HAL_UART_RxCpltCallback+0x1ec>)
 8000308:	f001 fbe0 	bl	8001acc <HAL_GPIO_WritePin>
 800030c:	e00d      	b.n	800032a <HAL_UART_RxCpltCallback+0x1ca>
		}
		else if(u8_uart_rx[3] == 'R' && u8_uart_rx[4] == 'F')
 800030e:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <HAL_UART_RxCpltCallback+0x1e0>)
 8000310:	78db      	ldrb	r3, [r3, #3]
 8000312:	2b52      	cmp	r3, #82	; 0x52
 8000314:	d109      	bne.n	800032a <HAL_UART_RxCpltCallback+0x1ca>
 8000316:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <HAL_UART_RxCpltCallback+0x1e0>)
 8000318:	791b      	ldrb	r3, [r3, #4]
 800031a:	2b46      	cmp	r3, #70	; 0x46
 800031c:	d105      	bne.n	800032a <HAL_UART_RxCpltCallback+0x1ca>
		{
			u8_auth_uart_command = u8_uart_rx[5];
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <HAL_UART_RxCpltCallback+0x1e0>)
 8000320:	795a      	ldrb	r2, [r3, #5]
 8000322:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <HAL_UART_RxCpltCallback+0x1f8>)
 8000324:	701a      	strb	r2, [r3, #0]
 8000326:	e000      	b.n	800032a <HAL_UART_RxCpltCallback+0x1ca>
			if(u8_device == '1')
 8000328:	bf00      	nop
		}
	}
	HAL_UART_Receive_IT(&huart3, u8_uart_rx, 7);
 800032a:	2207      	movs	r2, #7
 800032c:	4904      	ldr	r1, [pc, #16]	; (8000340 <HAL_UART_RxCpltCallback+0x1e0>)
 800032e:	4803      	ldr	r0, [pc, #12]	; (800033c <HAL_UART_RxCpltCallback+0x1dc>)
 8000330:	f003 f9af 	bl	8003692 <HAL_UART_Receive_IT>
}
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	200000a8 	.word	0x200000a8
 8000340:	20000048 	.word	0x20000048
 8000344:	2000000b 	.word	0x2000000b
 8000348:	200000f8 	.word	0x200000f8
 800034c:	40010800 	.word	0x40010800
 8000350:	20000000 	.word	0x20000000
 8000354:	20000050 	.word	0x20000050
 8000358:	20000046 	.word	0x20000046

0800035c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af02      	add	r7, sp, #8
 8000362:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	4b25      	ldr	r3, [pc, #148]	; (8000400 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	429a      	cmp	r2, r3
 800036e:	d142      	bne.n	80003f6 <HAL_TIM_PeriodElapsedCallback+0x9a>
	{
		u8_count_timer++;
 8000370:	4b24      	ldr	r3, [pc, #144]	; (8000404 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	3301      	adds	r3, #1
 8000376:	b2da      	uxtb	r2, r3
 8000378:	4b22      	ldr	r3, [pc, #136]	; (8000404 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800037a:	701a      	strb	r2, [r3, #0]
		if(u8_count_timer == 5)
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b05      	cmp	r3, #5
 8000382:	d138      	bne.n	80003f6 <HAL_TIM_PeriodElapsedCallback+0x9a>
		{
			u8_count_timer = 0;
 8000384:	4b1f      	ldr	r3, [pc, #124]	; (8000404 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(Slave1_GPIO_Port, Slave1_Pin, 0);
 800038a:	2200      	movs	r2, #0
 800038c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000390:	481d      	ldr	r0, [pc, #116]	; (8000408 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000392:	f001 fb9b 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi2, u8_spi_tx, u8_spi_rx, 10, 1);
 8000396:	2301      	movs	r3, #1
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	230a      	movs	r3, #10
 800039c:	4a1b      	ldr	r2, [pc, #108]	; (800040c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800039e:	491c      	ldr	r1, [pc, #112]	; (8000410 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80003a0:	481c      	ldr	r0, [pc, #112]	; (8000414 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80003a2:	f002 f99f 	bl	80026e4 <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(Slave1_GPIO_Port, Slave1_Pin, 1);
 80003a6:	2201      	movs	r2, #1
 80003a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003ac:	4816      	ldr	r0, [pc, #88]	; (8000408 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80003ae:	f001 fb8d 	bl	8001acc <HAL_GPIO_WritePin>
			RxSPISetup();
 80003b2:	f000 f929 	bl	8000608 <RxSPISetup>
			TxUARTSetup("M1",u8_LMdata);
 80003b6:	4918      	ldr	r1, [pc, #96]	; (8000418 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80003b8:	4818      	ldr	r0, [pc, #96]	; (800041c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80003ba:	f000 f835 	bl	8000428 <TxUARTSetup>
			HAL_UART_Transmit_IT(&huart3, u8_uart_tx, 11);
 80003be:	220b      	movs	r2, #11
 80003c0:	4917      	ldr	r1, [pc, #92]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80003c2:	4818      	ldr	r0, [pc, #96]	; (8000424 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80003c4:	f003 f921 	bl	800360a <HAL_UART_Transmit_IT>
			TxSPISetup('2', u8_LMdata, 'M');
 80003c8:	224d      	movs	r2, #77	; 0x4d
 80003ca:	4913      	ldr	r1, [pc, #76]	; (8000418 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80003cc:	2032      	movs	r0, #50	; 0x32
 80003ce:	f000 f887 	bl	80004e0 <TxSPISetup>
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 0);
 80003d2:	2200      	movs	r2, #0
 80003d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d8:	480b      	ldr	r0, [pc, #44]	; (8000408 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80003da:	f001 fb77 	bl	8001acc <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, u8_spi_tx, 10, 1);
 80003de:	2301      	movs	r3, #1
 80003e0:	220a      	movs	r2, #10
 80003e2:	490b      	ldr	r1, [pc, #44]	; (8000410 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80003e4:	480b      	ldr	r0, [pc, #44]	; (8000414 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80003e6:	f002 f841 	bl	800246c <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(Slave2_GPIO_Port, Slave2_Pin, 1);
 80003ea:	2201      	movs	r2, #1
 80003ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003f0:	4805      	ldr	r0, [pc, #20]	; (8000408 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80003f2:	f001 fb6b 	bl	8001acc <HAL_GPIO_WritePin>
		}
	}
}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000160 	.word	0x20000160
 8000404:	20000044 	.word	0x20000044
 8000408:	40010800 	.word	0x40010800
 800040c:	200000fc 	.word	0x200000fc
 8000410:	20000000 	.word	0x20000000
 8000414:	20000050 	.word	0x20000050
 8000418:	2000000c 	.word	0x2000000c
 800041c:	08003d1c 	.word	0x08003d1c
 8000420:	200000ec 	.word	0x200000ec
 8000424:	200000a8 	.word	0x200000a8

08000428 <TxUARTSetup>:
void TxUARTSetup(char *device, uint8_t* data)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	6039      	str	r1, [r7, #0]
	if(strcmp(device, "M1") == 0)
 8000432:	4928      	ldr	r1, [pc, #160]	; (80004d4 <TxUARTSetup+0xac>)
 8000434:	6878      	ldr	r0, [r7, #4]
 8000436:	f7ff fe89 	bl	800014c <strcmp>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d125      	bne.n	800048c <TxUARTSetup+0x64>
	{
		u8_uart_tx[0] = 'S';
 8000440:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <TxUARTSetup+0xb0>)
 8000442:	2253      	movs	r2, #83	; 0x53
 8000444:	701a      	strb	r2, [r3, #0]
		u8_uart_tx[1] = 'M';
 8000446:	4b24      	ldr	r3, [pc, #144]	; (80004d8 <TxUARTSetup+0xb0>)
 8000448:	224d      	movs	r2, #77	; 0x4d
 800044a:	705a      	strb	r2, [r3, #1]
		u8_uart_tx[2] = '1';
 800044c:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <TxUARTSetup+0xb0>)
 800044e:	2231      	movs	r2, #49	; 0x31
 8000450:	709a      	strb	r2, [r3, #2]
		u8_uart_tx[3] = 'L';
 8000452:	4b21      	ldr	r3, [pc, #132]	; (80004d8 <TxUARTSetup+0xb0>)
 8000454:	224c      	movs	r2, #76	; 0x4c
 8000456:	70da      	strb	r2, [r3, #3]
		u8_uart_tx[4] = 'M';
 8000458:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <TxUARTSetup+0xb0>)
 800045a:	224d      	movs	r2, #77	; 0x4d
 800045c:	711a      	strb	r2, [r3, #4]
		u8_uart_tx[5] = data[0];
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	781a      	ldrb	r2, [r3, #0]
 8000462:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <TxUARTSetup+0xb0>)
 8000464:	715a      	strb	r2, [r3, #5]
		u8_uart_tx[6] = data[1];
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	785a      	ldrb	r2, [r3, #1]
 800046a:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <TxUARTSetup+0xb0>)
 800046c:	719a      	strb	r2, [r3, #6]
		u8_uart_tx[7] = data[2];
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	789a      	ldrb	r2, [r3, #2]
 8000472:	4b19      	ldr	r3, [pc, #100]	; (80004d8 <TxUARTSetup+0xb0>)
 8000474:	71da      	strb	r2, [r3, #7]
		u8_uart_tx[8] = data[3];
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	78da      	ldrb	r2, [r3, #3]
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <TxUARTSetup+0xb0>)
 800047c:	721a      	strb	r2, [r3, #8]
		u8_uart_tx[9] = 'E';
 800047e:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <TxUARTSetup+0xb0>)
 8000480:	2245      	movs	r2, #69	; 0x45
 8000482:	725a      	strb	r2, [r3, #9]
		u8_uart_tx[10] = '\n';
 8000484:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <TxUARTSetup+0xb0>)
 8000486:	220a      	movs	r2, #10
 8000488:	729a      	strb	r2, [r3, #10]
		u8_uart_tx[5] = data[0];
		u8_uart_tx[6] = 'E';
		u8_uart_tx[7] = '\n';

	}
}
 800048a:	e01f      	b.n	80004cc <TxUARTSetup+0xa4>
	else if(strcmp(device, "S1") == 0)
 800048c:	4913      	ldr	r1, [pc, #76]	; (80004dc <TxUARTSetup+0xb4>)
 800048e:	6878      	ldr	r0, [r7, #4]
 8000490:	f7ff fe5c 	bl	800014c <strcmp>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d118      	bne.n	80004cc <TxUARTSetup+0xa4>
		u8_uart_tx[0] = 'S';
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <TxUARTSetup+0xb0>)
 800049c:	2253      	movs	r2, #83	; 0x53
 800049e:	701a      	strb	r2, [r3, #0]
		u8_uart_tx[1] = 'S';
 80004a0:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <TxUARTSetup+0xb0>)
 80004a2:	2253      	movs	r2, #83	; 0x53
 80004a4:	705a      	strb	r2, [r3, #1]
		u8_uart_tx[2] = '1';
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <TxUARTSetup+0xb0>)
 80004a8:	2231      	movs	r2, #49	; 0x31
 80004aa:	709a      	strb	r2, [r3, #2]
		u8_uart_tx[3] = 'R';
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <TxUARTSetup+0xb0>)
 80004ae:	2252      	movs	r2, #82	; 0x52
 80004b0:	70da      	strb	r2, [r3, #3]
		u8_uart_tx[4] = 'F';
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <TxUARTSetup+0xb0>)
 80004b4:	2246      	movs	r2, #70	; 0x46
 80004b6:	711a      	strb	r2, [r3, #4]
		u8_uart_tx[5] = data[0];
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	781a      	ldrb	r2, [r3, #0]
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <TxUARTSetup+0xb0>)
 80004be:	715a      	strb	r2, [r3, #5]
		u8_uart_tx[6] = 'E';
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <TxUARTSetup+0xb0>)
 80004c2:	2245      	movs	r2, #69	; 0x45
 80004c4:	719a      	strb	r2, [r3, #6]
		u8_uart_tx[7] = '\n';
 80004c6:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <TxUARTSetup+0xb0>)
 80004c8:	220a      	movs	r2, #10
 80004ca:	71da      	strb	r2, [r3, #7]
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	08003d1c 	.word	0x08003d1c
 80004d8:	200000ec 	.word	0x200000ec
 80004dc:	08003d20 	.word	0x08003d20

080004e0 <TxSPISetup>:
void TxSPISetup(uint8_t device, uint8_t* data,uint8_t from)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	6039      	str	r1, [r7, #0]
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	4613      	mov	r3, r2
 80004ee:	71bb      	strb	r3, [r7, #6]
	if(from == 'C')//Computer
 80004f0:	79bb      	ldrb	r3, [r7, #6]
 80004f2:	2b43      	cmp	r3, #67	; 0x43
 80004f4:	d12c      	bne.n	8000550 <TxSPISetup+0x70>
	{
		u8_spi_tx[0] = 'S';
 80004f6:	4b43      	ldr	r3, [pc, #268]	; (8000604 <TxSPISetup+0x124>)
 80004f8:	2253      	movs	r2, #83	; 0x53
 80004fa:	701a      	strb	r2, [r3, #0]
		u8_spi_tx[3] = 'L';
 80004fc:	4b41      	ldr	r3, [pc, #260]	; (8000604 <TxSPISetup+0x124>)
 80004fe:	224c      	movs	r2, #76	; 0x4c
 8000500:	70da      	strb	r2, [r3, #3]
		u8_spi_tx[4] = 'E';
 8000502:	4b40      	ldr	r3, [pc, #256]	; (8000604 <TxSPISetup+0x124>)
 8000504:	2245      	movs	r2, #69	; 0x45
 8000506:	711a      	strb	r2, [r3, #4]
		u8_spi_tx[5] = 'D';
 8000508:	4b3e      	ldr	r3, [pc, #248]	; (8000604 <TxSPISetup+0x124>)
 800050a:	2244      	movs	r2, #68	; 0x44
 800050c:	715a      	strb	r2, [r3, #5]
		u8_spi_tx[6] = 'M';
 800050e:	4b3d      	ldr	r3, [pc, #244]	; (8000604 <TxSPISetup+0x124>)
 8000510:	224d      	movs	r2, #77	; 0x4d
 8000512:	719a      	strb	r2, [r3, #6]
		u8_spi_tx[7] = 'D';
 8000514:	4b3b      	ldr	r3, [pc, #236]	; (8000604 <TxSPISetup+0x124>)
 8000516:	2244      	movs	r2, #68	; 0x44
 8000518:	71da      	strb	r2, [r3, #7]
		u8_spi_tx[9] = 'E';
 800051a:	4b3a      	ldr	r3, [pc, #232]	; (8000604 <TxSPISetup+0x124>)
 800051c:	2245      	movs	r2, #69	; 0x45
 800051e:	725a      	strb	r2, [r3, #9]

		if(device == '1')
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	2b31      	cmp	r3, #49	; 0x31
 8000524:	d106      	bne.n	8000534 <TxSPISetup+0x54>
		{
			u8_spi_tx[1] = 'M';
 8000526:	4b37      	ldr	r3, [pc, #220]	; (8000604 <TxSPISetup+0x124>)
 8000528:	224d      	movs	r2, #77	; 0x4d
 800052a:	705a      	strb	r2, [r3, #1]
			u8_spi_tx[2] = '1';
 800052c:	4b35      	ldr	r3, [pc, #212]	; (8000604 <TxSPISetup+0x124>)
 800052e:	2231      	movs	r2, #49	; 0x31
 8000530:	709a      	strb	r2, [r3, #2]
 8000532:	e008      	b.n	8000546 <TxSPISetup+0x66>
		}
		else if(device == '2')
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	2b32      	cmp	r3, #50	; 0x32
 8000538:	d105      	bne.n	8000546 <TxSPISetup+0x66>
		{
			u8_spi_tx[1] = 'M';
 800053a:	4b32      	ldr	r3, [pc, #200]	; (8000604 <TxSPISetup+0x124>)
 800053c:	224d      	movs	r2, #77	; 0x4d
 800053e:	705a      	strb	r2, [r3, #1]
			u8_spi_tx[2] = '2';
 8000540:	4b30      	ldr	r3, [pc, #192]	; (8000604 <TxSPISetup+0x124>)
 8000542:	2232      	movs	r2, #50	; 0x32
 8000544:	709a      	strb	r2, [r3, #2]
		}
		u8_spi_tx[8] = data[0];
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	781a      	ldrb	r2, [r3, #0]
 800054a:	4b2e      	ldr	r3, [pc, #184]	; (8000604 <TxSPISetup+0x124>)
 800054c:	721a      	strb	r2, [r3, #8]
			u8_spi_tx[7] = data[2];
			u8_spi_tx[8] = data[3];
		}
	}

}
 800054e:	e054      	b.n	80005fa <TxSPISetup+0x11a>
	else if(from == 'P')
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	2b50      	cmp	r3, #80	; 0x50
 8000554:	d12c      	bne.n	80005b0 <TxSPISetup+0xd0>
		u8_spi_tx[0] = 'S';
 8000556:	4b2b      	ldr	r3, [pc, #172]	; (8000604 <TxSPISetup+0x124>)
 8000558:	2253      	movs	r2, #83	; 0x53
 800055a:	701a      	strb	r2, [r3, #0]
		u8_spi_tx[3] = 'L';
 800055c:	4b29      	ldr	r3, [pc, #164]	; (8000604 <TxSPISetup+0x124>)
 800055e:	224c      	movs	r2, #76	; 0x4c
 8000560:	70da      	strb	r2, [r3, #3]
		u8_spi_tx[4] = 'E';
 8000562:	4b28      	ldr	r3, [pc, #160]	; (8000604 <TxSPISetup+0x124>)
 8000564:	2245      	movs	r2, #69	; 0x45
 8000566:	711a      	strb	r2, [r3, #4]
		u8_spi_tx[5] = 'D';
 8000568:	4b26      	ldr	r3, [pc, #152]	; (8000604 <TxSPISetup+0x124>)
 800056a:	2244      	movs	r2, #68	; 0x44
 800056c:	715a      	strb	r2, [r3, #5]
		u8_spi_tx[6] = 'P';
 800056e:	4b25      	ldr	r3, [pc, #148]	; (8000604 <TxSPISetup+0x124>)
 8000570:	2250      	movs	r2, #80	; 0x50
 8000572:	719a      	strb	r2, [r3, #6]
		u8_spi_tx[7] = 'W';
 8000574:	4b23      	ldr	r3, [pc, #140]	; (8000604 <TxSPISetup+0x124>)
 8000576:	2257      	movs	r2, #87	; 0x57
 8000578:	71da      	strb	r2, [r3, #7]
		u8_spi_tx[9] = 'E';
 800057a:	4b22      	ldr	r3, [pc, #136]	; (8000604 <TxSPISetup+0x124>)
 800057c:	2245      	movs	r2, #69	; 0x45
 800057e:	725a      	strb	r2, [r3, #9]
		if(device == '1')
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	2b31      	cmp	r3, #49	; 0x31
 8000584:	d106      	bne.n	8000594 <TxSPISetup+0xb4>
			u8_spi_tx[1] = 'M';
 8000586:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <TxSPISetup+0x124>)
 8000588:	224d      	movs	r2, #77	; 0x4d
 800058a:	705a      	strb	r2, [r3, #1]
			u8_spi_tx[2] = '1';
 800058c:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <TxSPISetup+0x124>)
 800058e:	2231      	movs	r2, #49	; 0x31
 8000590:	709a      	strb	r2, [r3, #2]
 8000592:	e008      	b.n	80005a6 <TxSPISetup+0xc6>
		else if(device == '2')
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	2b32      	cmp	r3, #50	; 0x32
 8000598:	d105      	bne.n	80005a6 <TxSPISetup+0xc6>
			u8_spi_tx[1] = 'M';
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <TxSPISetup+0x124>)
 800059c:	224d      	movs	r2, #77	; 0x4d
 800059e:	705a      	strb	r2, [r3, #1]
			u8_spi_tx[2] = '2';
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <TxSPISetup+0x124>)
 80005a2:	2232      	movs	r2, #50	; 0x32
 80005a4:	709a      	strb	r2, [r3, #2]
		u8_spi_tx[8] = data[0];
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	781a      	ldrb	r2, [r3, #0]
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <TxSPISetup+0x124>)
 80005ac:	721a      	strb	r2, [r3, #8]
}
 80005ae:	e024      	b.n	80005fa <TxSPISetup+0x11a>
		u8_spi_tx[0] = 'S';
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <TxSPISetup+0x124>)
 80005b2:	2253      	movs	r2, #83	; 0x53
 80005b4:	701a      	strb	r2, [r3, #0]
		u8_spi_tx[1] = 'M';
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <TxSPISetup+0x124>)
 80005b8:	224d      	movs	r2, #77	; 0x4d
 80005ba:	705a      	strb	r2, [r3, #1]
		u8_spi_tx[2] = '1';
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <TxSPISetup+0x124>)
 80005be:	2231      	movs	r2, #49	; 0x31
 80005c0:	709a      	strb	r2, [r3, #2]
		u8_spi_tx[3] = 'L';
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <TxSPISetup+0x124>)
 80005c4:	224c      	movs	r2, #76	; 0x4c
 80005c6:	70da      	strb	r2, [r3, #3]
		u8_spi_tx[4] = 'M';
 80005c8:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <TxSPISetup+0x124>)
 80005ca:	224d      	movs	r2, #77	; 0x4d
 80005cc:	711a      	strb	r2, [r3, #4]
		u8_spi_tx[9] = 'E';
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <TxSPISetup+0x124>)
 80005d0:	2245      	movs	r2, #69	; 0x45
 80005d2:	725a      	strb	r2, [r3, #9]
		if(device == '2')
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	2b32      	cmp	r3, #50	; 0x32
 80005d8:	d10f      	bne.n	80005fa <TxSPISetup+0x11a>
			u8_spi_tx[5] = data[0];
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	781a      	ldrb	r2, [r3, #0]
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <TxSPISetup+0x124>)
 80005e0:	715a      	strb	r2, [r3, #5]
			u8_spi_tx[6] = data[1];
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	785a      	ldrb	r2, [r3, #1]
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <TxSPISetup+0x124>)
 80005e8:	719a      	strb	r2, [r3, #6]
			u8_spi_tx[7] = data[2];
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	789a      	ldrb	r2, [r3, #2]
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <TxSPISetup+0x124>)
 80005f0:	71da      	strb	r2, [r3, #7]
			u8_spi_tx[8] = data[3];
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	78da      	ldrb	r2, [r3, #3]
 80005f6:	4b03      	ldr	r3, [pc, #12]	; (8000604 <TxSPISetup+0x124>)
 80005f8:	721a      	strb	r2, [r3, #8]
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	20000000 	.word	0x20000000

08000608 <RxSPISetup>:
void RxSPISetup()
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
	if(u8_spi_rx[0] == 'S' && u8_spi_rx[9] == 'E')
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <RxSPISetup+0x3c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b53      	cmp	r3, #83	; 0x53
 8000612:	d113      	bne.n	800063c <RxSPISetup+0x34>
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <RxSPISetup+0x3c>)
 8000616:	7a5b      	ldrb	r3, [r3, #9]
 8000618:	2b45      	cmp	r3, #69	; 0x45
 800061a:	d10f      	bne.n	800063c <RxSPISetup+0x34>
	{
		u8_LMdata[0] = u8_spi_rx[5];
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <RxSPISetup+0x3c>)
 800061e:	795a      	ldrb	r2, [r3, #5]
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <RxSPISetup+0x40>)
 8000622:	701a      	strb	r2, [r3, #0]
		u8_LMdata[1] = u8_spi_rx[6];
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <RxSPISetup+0x3c>)
 8000626:	799a      	ldrb	r2, [r3, #6]
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <RxSPISetup+0x40>)
 800062a:	705a      	strb	r2, [r3, #1]
		u8_LMdata[2] = u8_spi_rx[7];
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <RxSPISetup+0x3c>)
 800062e:	79da      	ldrb	r2, [r3, #7]
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <RxSPISetup+0x40>)
 8000632:	709a      	strb	r2, [r3, #2]
		u8_LMdata[3] = u8_spi_rx[8];
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <RxSPISetup+0x3c>)
 8000636:	7a1a      	ldrb	r2, [r3, #8]
 8000638:	4b03      	ldr	r3, [pc, #12]	; (8000648 <RxSPISetup+0x40>)
 800063a:	70da      	strb	r2, [r3, #3]
	}
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	200000fc 	.word	0x200000fc
 8000648:	2000000c 	.word	0x2000000c

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f000 feae 	bl	80013b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f87a 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 f9be 	bl	80009d8 <MX_GPIO_Init>
  MX_SPI2_Init();
 800065c:	f000 f90e 	bl	800087c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000660:	f000 f990 	bl	8000984 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000664:	f000 f940 	bl	80008e8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000668:	f000 f8d2 	bl	8000810 <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800066c:	f000 f8b3 	bl	80007d6 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Init(&hspi1);
 8000670:	4828      	ldr	r0, [pc, #160]	; (8000714 <main+0xc8>)
 8000672:	f001 fe77 	bl	8002364 <HAL_SPI_Init>
  HAL_SPI_Init(&hspi2);
 8000676:	4828      	ldr	r0, [pc, #160]	; (8000718 <main+0xcc>)
 8000678:	f001 fe74 	bl	8002364 <HAL_SPI_Init>
  HAL_UART_Init(&huart3);
 800067c:	4827      	ldr	r0, [pc, #156]	; (800071c <main+0xd0>)
 800067e:	f002 ff77 	bl	8003570 <HAL_UART_Init>
  //HAL_TIM_Base_Init(&htim2);
  HAL_TIM_Base_Start_IT(&htim2);
 8000682:	4827      	ldr	r0, [pc, #156]	; (8000720 <main+0xd4>)
 8000684:	f002 fbca 	bl	8002e1c <HAL_TIM_Base_Start_IT>
  MFRC522_Init();
 8000688:	f000 fca3 	bl	8000fd2 <MFRC522_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart3, u8_uart_rx, 7);
 800068c:	2207      	movs	r2, #7
 800068e:	4925      	ldr	r1, [pc, #148]	; (8000724 <main+0xd8>)
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <main+0xd0>)
 8000692:	f002 fffe 	bl	8003692 <HAL_UART_Receive_IT>
  while (1)
  {
	  if(u8_device == '3' && u8_auth_uart_command == '1')
 8000696:	4b24      	ldr	r3, [pc, #144]	; (8000728 <main+0xdc>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b33      	cmp	r3, #51	; 0x33
 800069c:	d135      	bne.n	800070a <main+0xbe>
 800069e:	4b23      	ldr	r3, [pc, #140]	; (800072c <main+0xe0>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b31      	cmp	r3, #49	; 0x31
 80006a4:	d131      	bne.n	800070a <main+0xbe>
	  {
		  if (MFRC522_Check(CardID) == MI_OK && nfcFirst == 0)
 80006a6:	4822      	ldr	r0, [pc, #136]	; (8000730 <main+0xe4>)
 80006a8:	f000 faa8 	bl	8000bfc <MFRC522_Check>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d11f      	bne.n	80006f2 <main+0xa6>
 80006b2:	4b20      	ldr	r3, [pc, #128]	; (8000734 <main+0xe8>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d11b      	bne.n	80006f2 <main+0xa6>
		  {
			nfcFirst = 1;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <main+0xe8>)
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c4:	481c      	ldr	r0, [pc, #112]	; (8000738 <main+0xec>)
 80006c6:	f001 fa19 	bl	8001afc <HAL_GPIO_TogglePin>
			if (MFRC522_Compare(CardID, MyID) == MI_OK )
 80006ca:	491c      	ldr	r1, [pc, #112]	; (800073c <main+0xf0>)
 80006cc:	4818      	ldr	r0, [pc, #96]	; (8000730 <main+0xe4>)
 80006ce:	f000 faae 	bl	8000c2e <MFRC522_Compare>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d118      	bne.n	800070a <main+0xbe>
			{
				auth[0] = '1';
 80006d8:	4b19      	ldr	r3, [pc, #100]	; (8000740 <main+0xf4>)
 80006da:	2231      	movs	r2, #49	; 0x31
 80006dc:	701a      	strb	r2, [r3, #0]
				TxUARTSetup("S1", auth);
 80006de:	4918      	ldr	r1, [pc, #96]	; (8000740 <main+0xf4>)
 80006e0:	4818      	ldr	r0, [pc, #96]	; (8000744 <main+0xf8>)
 80006e2:	f7ff fea1 	bl	8000428 <TxUARTSetup>
				HAL_UART_Transmit_IT(&huart3, u8_uart_tx, 8);
 80006e6:	2208      	movs	r2, #8
 80006e8:	4917      	ldr	r1, [pc, #92]	; (8000748 <main+0xfc>)
 80006ea:	480c      	ldr	r0, [pc, #48]	; (800071c <main+0xd0>)
 80006ec:	f002 ff8d 	bl	800360a <HAL_UART_Transmit_IT>
			if (MFRC522_Compare(CardID, MyID) == MI_OK )
 80006f0:	e00b      	b.n	800070a <main+0xbe>
			}
		  }
		  else if(MFRC522_Check(CardID) != MI_OK)
 80006f2:	480f      	ldr	r0, [pc, #60]	; (8000730 <main+0xe4>)
 80006f4:	f000 fa82 	bl	8000bfc <MFRC522_Check>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d005      	beq.n	800070a <main+0xbe>
		  {
			  auth[0] = '0';
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <main+0xf4>)
 8000700:	2230      	movs	r2, #48	; 0x30
 8000702:	701a      	strb	r2, [r3, #0]
			  nfcFirst = 0;
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <main+0xe8>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  HAL_Delay(10);
 800070a:	200a      	movs	r0, #10
 800070c:	f000 feb2 	bl	8001474 <HAL_Delay>
	  if(u8_device == '3' && u8_auth_uart_command == '1')
 8000710:	e7c1      	b.n	8000696 <main+0x4a>
 8000712:	bf00      	nop
 8000714:	20000108 	.word	0x20000108
 8000718:	20000050 	.word	0x20000050
 800071c:	200000a8 	.word	0x200000a8
 8000720:	20000160 	.word	0x20000160
 8000724:	20000048 	.word	0x20000048
 8000728:	2000000b 	.word	0x2000000b
 800072c:	20000046 	.word	0x20000046
 8000730:	200001a8 	.word	0x200001a8
 8000734:	20000045 	.word	0x20000045
 8000738:	40011000 	.word	0x40011000
 800073c:	20000010 	.word	0x20000010
 8000740:	20000018 	.word	0x20000018
 8000744:	08003d20 	.word	0x08003d20
 8000748:	200000ec 	.word	0x200000ec

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b090      	sub	sp, #64	; 0x40
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0318 	add.w	r3, r7, #24
 8000756:	2228      	movs	r2, #40	; 0x28
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f003 faca 	bl	8003cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076e:	2301      	movs	r3, #1
 8000770:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000776:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	2301      	movs	r3, #1
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000784:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000788:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800078a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0318 	add.w	r3, r7, #24
 8000794:	4618      	mov	r0, r3
 8000796:	f001 f9cb 	bl	8001b30 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007a0:	f000 f99c 	bl	8000adc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2302      	movs	r3, #2
 80007aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2102      	movs	r1, #2
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fc36 	bl	8002030 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007ca:	f000 f987 	bl	8000adc <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	3740      	adds	r7, #64	; 0x40
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
  /* SPI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	2024      	movs	r0, #36	; 0x24
 80007e0:	f000 ff43 	bl	800166a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80007e4:	2024      	movs	r0, #36	; 0x24
 80007e6:	f000 ff5c 	bl	80016a2 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2027      	movs	r0, #39	; 0x27
 80007f0:	f000 ff3b 	bl	800166a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80007f4:	2027      	movs	r0, #39	; 0x27
 80007f6:	f000 ff54 	bl	80016a2 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	201c      	movs	r0, #28
 8000800:	f000 ff33 	bl	800166a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000804:	201c      	movs	r0, #28
 8000806:	f000 ff4c 	bl	80016a2 <HAL_NVIC_EnableIRQ>
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_SPI1_Init+0x64>)
 8000816:	4a18      	ldr	r2, [pc, #96]	; (8000878 <MX_SPI1_Init+0x68>)
 8000818:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_SPI1_Init+0x64>)
 800081c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000820:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_SPI1_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_SPI1_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_SPI1_Init+0x64>)
 800083c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000840:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_SPI1_Init+0x64>)
 8000844:	2210      	movs	r2, #16
 8000846:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_SPI1_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_SPI1_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_SPI1_Init+0x64>)
 800085c:	220a      	movs	r2, #10
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_SPI1_Init+0x64>)
 8000862:	f001 fd7f 	bl	8002364 <HAL_SPI_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800086c:	f000 f936 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000108 	.word	0x20000108
 8000878:	40013000 	.word	0x40013000

0800087c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_SPI2_Init+0x64>)
 8000882:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <MX_SPI2_Init+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_SPI2_Init+0x64>)
 8000888:	f44f 7282 	mov.w	r2, #260	; 0x104
 800088c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_SPI2_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_SPI2_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_SPI2_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008b0:	2218      	movs	r2, #24
 80008b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008c8:	220a      	movs	r2, #10
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008ce:	f001 fd49 	bl	8002364 <HAL_SPI_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008d8:	f000 f900 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000050 	.word	0x20000050
 80008e4:	40003800 	.word	0x40003800

080008e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	463b      	mov	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000904:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <MX_TIM2_Init+0x98>)
 8000906:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800090a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <MX_TIM2_Init+0x98>)
 800090e:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000912:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000914:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_TIM2_Init+0x98>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800091a:	4b19      	ldr	r3, [pc, #100]	; (8000980 <MX_TIM2_Init+0x98>)
 800091c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000920:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_TIM2_Init+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_TIM2_Init+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800092e:	4814      	ldr	r0, [pc, #80]	; (8000980 <MX_TIM2_Init+0x98>)
 8000930:	f002 fa24 	bl	8002d7c <HAL_TIM_Base_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800093a:	f000 f8cf 	bl	8000adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000942:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	4619      	mov	r1, r3
 800094a:	480d      	ldr	r0, [pc, #52]	; (8000980 <MX_TIM2_Init+0x98>)
 800094c:	f002 fbc0 	bl	80030d0 <HAL_TIM_ConfigClockSource>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000956:	f000 f8c1 	bl	8000adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	4619      	mov	r1, r3
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <MX_TIM2_Init+0x98>)
 8000968:	f002 fd92 	bl	8003490 <HAL_TIMEx_MasterConfigSynchronization>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000972:	f000 f8b3 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000160 	.word	0x20000160

08000984 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <MX_USART3_UART_Init+0x50>)
 800098c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_USART3_UART_Init+0x4c>)
 80009bc:	f002 fdd8 	bl	8003570 <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009c6:	f000 f889 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000a8 	.word	0x200000a8
 80009d4:	40004800 	.word	0x40004800

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 0310 	add.w	r3, r7, #16
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ec:	4b38      	ldr	r3, [pc, #224]	; (8000ad0 <MX_GPIO_Init+0xf8>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a37      	ldr	r2, [pc, #220]	; (8000ad0 <MX_GPIO_Init+0xf8>)
 80009f2:	f043 0310 	orr.w	r3, r3, #16
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b35      	ldr	r3, [pc, #212]	; (8000ad0 <MX_GPIO_Init+0xf8>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0310 	and.w	r3, r3, #16
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a04:	4b32      	ldr	r3, [pc, #200]	; (8000ad0 <MX_GPIO_Init+0xf8>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a31      	ldr	r2, [pc, #196]	; (8000ad0 <MX_GPIO_Init+0xf8>)
 8000a0a:	f043 0320 	orr.w	r3, r3, #32
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b2f      	ldr	r3, [pc, #188]	; (8000ad0 <MX_GPIO_Init+0xf8>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0320 	and.w	r3, r3, #32
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1c:	4b2c      	ldr	r3, [pc, #176]	; (8000ad0 <MX_GPIO_Init+0xf8>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a2b      	ldr	r2, [pc, #172]	; (8000ad0 <MX_GPIO_Init+0xf8>)
 8000a22:	f043 0304 	orr.w	r3, r3, #4
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <MX_GPIO_Init+0xf8>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a34:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <MX_GPIO_Init+0xf8>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a25      	ldr	r2, [pc, #148]	; (8000ad0 <MX_GPIO_Init+0xf8>)
 8000a3a:	f043 0308 	orr.w	r3, r3, #8
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <MX_GPIO_Init+0xf8>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f003 0308 	and.w	r3, r3, #8
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a52:	4820      	ldr	r0, [pc, #128]	; (8000ad4 <MX_GPIO_Init+0xfc>)
 8000a54:	f001 f83a 	bl	8001acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	481e      	ldr	r0, [pc, #120]	; (8000ad8 <MX_GPIO_Init+0x100>)
 8000a5e:	f001 f835 	bl	8001acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Slave1_Pin|Slave2_Pin, GPIO_PIN_SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000a68:	481b      	ldr	r0, [pc, #108]	; (8000ad8 <MX_GPIO_Init+0x100>)
 8000a6a:	f001 f82f 	bl	8001acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	4619      	mov	r1, r3
 8000a86:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <MX_GPIO_Init+0xfc>)
 8000a88:	f000 fe9c 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <MX_GPIO_Init+0x100>)
 8000aa4:	f000 fe8e 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Slave1_Pin Slave2_Pin */
  GPIO_InitStruct.Pin = Slave1_Pin|Slave2_Pin;
 8000aa8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000aac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_GPIO_Init+0x100>)
 8000ac2:	f000 fe7f 	bl	80017c4 <HAL_GPIO_Init>

}
 8000ac6:	bf00      	nop
 8000ac8:	3720      	adds	r7, #32
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40011000 	.word	0x40011000
 8000ad8:	40010800 	.word	0x40010800

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x8>
	...

08000ae8 <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af02      	add	r7, sp, #8
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	
	writeCommand[0] = data;
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8000af6:	f107 0208 	add.w	r2, r7, #8
 8000afa:	f107 010c 	add.w	r1, r7, #12
 8000afe:	230a      	movs	r3, #10
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2301      	movs	r3, #1
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <SPI1SendByte+0x2c>)
 8000b06:	f001 fded 	bl	80026e4 <HAL_SPI_TransmitReceive>
	return readValue[0];
 8000b0a:	7a3b      	ldrb	r3, [r7, #8]
	//SPI1->DR = data;															// вывод в SPI1
	//while (!(SPI1->SR & SPI_SR_RXNE));     				// ждем окончания обмена (STM32F103)
	//for (uint8_t i=0; i<50; i++) {};
	//data = SPI1->DR;															// читаем принятые данные
	//return data;
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000108 	.word	0x20000108

08000b18 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	460a      	mov	r2, r1
 8000b22:	71fb      	strb	r3, [r7, #7]
 8000b24:	4613      	mov	r3, r2
 8000b26:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2110      	movs	r1, #16
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <SPI1_WriteReg+0x3c>)
 8000b2e:	f000 ffcd 	bl	8001acc <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ffd7 	bl	8000ae8 <SPI1SendByte>
	SPI1SendByte(value);
 8000b3a:	79bb      	ldrb	r3, [r7, #6]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ffd3 	bl	8000ae8 <SPI1SendByte>
	cs_set();
 8000b42:	2201      	movs	r2, #1
 8000b44:	2110      	movs	r1, #16
 8000b46:	4803      	ldr	r0, [pc, #12]	; (8000b54 <SPI1_WriteReg+0x3c>)
 8000b48:	f000 ffc0 	bl	8001acc <HAL_GPIO_WritePin>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40010800 	.word	0x40010800

08000b58 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8000b62:	2200      	movs	r2, #0
 8000b64:	2110      	movs	r1, #16
 8000b66:	480b      	ldr	r0, [pc, #44]	; (8000b94 <SPI1_ReadReg+0x3c>)
 8000b68:	f000 ffb0 	bl	8001acc <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ffba 	bl	8000ae8 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff ffb7 	bl	8000ae8 <SPI1SendByte>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2110      	movs	r1, #16
 8000b82:	4804      	ldr	r0, [pc, #16]	; (8000b94 <SPI1_ReadReg+0x3c>)
 8000b84:	f000 ffa2 	bl	8001acc <HAL_GPIO_WritePin>
	return val;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40010800 	.word	0x40010800

08000b98 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	460a      	mov	r2, r1
 8000ba2:	71fb      	strb	r3, [r7, #7]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000bb2:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8000bb4:	79ba      	ldrb	r2, [r7, #6]
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ffac 	bl	8000b18 <SPI1_WriteReg>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	b25b      	sxtb	r3, r3
 8000bd8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ffb5 	bl	8000b58 <SPI1_ReadReg>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	73fb      	strb	r3, [r7, #15]
	return val;	
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 8000c04:	6879      	ldr	r1, [r7, #4]
 8000c06:	2026      	movs	r0, #38	; 0x26
 8000c08:	f000 f869 	bl	8000cde <MFRC522_Request>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d104      	bne.n	8000c20 <MFRC522_Check+0x24>
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f955 	bl	8000ec6 <MFRC522_Anticoll>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																					// Command card into hibernation 
 8000c20:	f000 fa18 	bl	8001054 <MFRC522_Halt>
	return status;
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <MFRC522_Compare>:

uint8_t MFRC522_Compare(uint8_t* CardID, uint8_t* CompareID) {
 8000c2e:	b480      	push	{r7}
 8000c30:	b085      	sub	sp, #20
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]
 8000c3c:	e00e      	b.n	8000c5c <MFRC522_Compare+0x2e>
		if (CardID[i] != CompareID[i]) return MI_ERR;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	4413      	add	r3, r2
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	6839      	ldr	r1, [r7, #0]
 8000c4a:	440b      	add	r3, r1
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d001      	beq.n	8000c56 <MFRC522_Compare+0x28>
 8000c52:	2302      	movs	r3, #2
 8000c54:	e006      	b.n	8000c64 <MFRC522_Compare+0x36>
	for (i = 0; i < 5; i++) {
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	d9ed      	bls.n	8000c3e <MFRC522_Compare+0x10>
	}
	return MI_OK;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <MFRC522_SetBitMask>:

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	460a      	mov	r2, r1
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ffa1 	bl	8000bc8 <MFRC522_ReadRegister>
 8000c86:	4603      	mov	r3, r0
 8000c88:	461a      	mov	r2, r3
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff7f 	bl	8000b98 <MFRC522_WriteRegister>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	460a      	mov	r2, r1
 8000cac:	71fb      	strb	r3, [r7, #7]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff87 	bl	8000bc8 <MFRC522_ReadRegister>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	b25a      	sxtb	r2, r3
 8000cbe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	b25b      	sxtb	r3, r3
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff61 	bl	8000b98 <MFRC522_WriteRegister>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af02      	add	r7, sp, #8
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	6039      	str	r1, [r7, #0]
 8000ce8:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8000cea:	2107      	movs	r1, #7
 8000cec:	200d      	movs	r0, #13
 8000cee:	f7ff ff53 	bl	8000b98 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	79fa      	ldrb	r2, [r7, #7]
 8000cf6:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	2201      	movs	r2, #1
 8000d02:	6839      	ldr	r1, [r7, #0]
 8000d04:	200c      	movs	r0, #12
 8000d06:	f000 f80f 	bl	8000d28 <MFRC522_ToCard>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <MFRC522_Request+0x3c>
 8000d14:	89bb      	ldrh	r3, [r7, #12]
 8000d16:	2b10      	cmp	r3, #16
 8000d18:	d001      	beq.n	8000d1e <MFRC522_Request+0x40>
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	73fb      	strb	r3, [r7, #15]
	return status;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	4603      	mov	r3, r0
 8000d34:	73fb      	strb	r3, [r7, #15]
 8000d36:	4613      	mov	r3, r2
 8000d38:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8000d42:	2300      	movs	r3, #0
 8000d44:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	2b0c      	cmp	r3, #12
 8000d4a:	d006      	beq.n	8000d5a <MFRC522_ToCard+0x32>
 8000d4c:	2b0e      	cmp	r3, #14
 8000d4e:	d109      	bne.n	8000d64 <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8000d50:	2312      	movs	r3, #18
 8000d52:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8000d54:	2310      	movs	r3, #16
 8000d56:	757b      	strb	r3, [r7, #21]
			break;
 8000d58:	e005      	b.n	8000d66 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8000d5a:	2377      	movs	r3, #119	; 0x77
 8000d5c:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8000d5e:	2330      	movs	r3, #48	; 0x30
 8000d60:	757b      	strb	r3, [r7, #21]
			break;
 8000d62:	e000      	b.n	8000d66 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 8000d64:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8000d66:	7dbb      	ldrb	r3, [r7, #22]
 8000d68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	4619      	mov	r1, r3
 8000d70:	2002      	movs	r0, #2
 8000d72:	f7ff ff11 	bl	8000b98 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8000d76:	2180      	movs	r1, #128	; 0x80
 8000d78:	2004      	movs	r0, #4
 8000d7a:	f7ff ff92 	bl	8000ca2 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000d7e:	2180      	movs	r1, #128	; 0x80
 8000d80:	200a      	movs	r0, #10
 8000d82:	f7ff ff74 	bl	8000c6e <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8000d86:	2100      	movs	r1, #0
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff ff05 	bl	8000b98 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8000d8e:	2300      	movs	r3, #0
 8000d90:	827b      	strh	r3, [r7, #18]
 8000d92:	e00a      	b.n	8000daa <MFRC522_ToCard+0x82>
 8000d94:	8a7b      	ldrh	r3, [r7, #18]
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	4413      	add	r3, r2
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2009      	movs	r0, #9
 8000da0:	f7ff fefa 	bl	8000b98 <MFRC522_WriteRegister>
 8000da4:	8a7b      	ldrh	r3, [r7, #18]
 8000da6:	3301      	adds	r3, #1
 8000da8:	827b      	strh	r3, [r7, #18]
 8000daa:	7bbb      	ldrb	r3, [r7, #14]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	8a7a      	ldrh	r2, [r7, #18]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d3ef      	bcc.n	8000d94 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	4619      	mov	r1, r3
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff feed 	bl	8000b98 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	2b0c      	cmp	r3, #12
 8000dc2:	d103      	bne.n	8000dcc <MFRC522_ToCard+0xa4>
 8000dc4:	2180      	movs	r1, #128	; 0x80
 8000dc6:	200d      	movs	r0, #13
 8000dc8:	f7ff ff51 	bl	8000c6e <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000dcc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000dd0:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8000dd2:	2004      	movs	r0, #4
 8000dd4:	f7ff fef8 	bl	8000bc8 <MFRC522_ReadRegister>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	753b      	strb	r3, [r7, #20]
		i--;
 8000ddc:	8a7b      	ldrh	r3, [r7, #18]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000de2:	8a7b      	ldrh	r3, [r7, #18]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d00a      	beq.n	8000dfe <MFRC522_ToCard+0xd6>
 8000de8:	7d3b      	ldrb	r3, [r7, #20]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d105      	bne.n	8000dfe <MFRC522_ToCard+0xd6>
 8000df2:	7d3a      	ldrb	r2, [r7, #20]
 8000df4:	7d7b      	ldrb	r3, [r7, #21]
 8000df6:	4013      	ands	r3, r2
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0e9      	beq.n	8000dd2 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	200d      	movs	r0, #13
 8000e02:	f7ff ff4e 	bl	8000ca2 <MFRC522_ClearBitMask>

	if (i != 0)  {
 8000e06:	8a7b      	ldrh	r3, [r7, #18]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d057      	beq.n	8000ebc <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8000e0c:	2006      	movs	r0, #6
 8000e0e:	f7ff fedb 	bl	8000bc8 <MFRC522_ReadRegister>
 8000e12:	4603      	mov	r3, r0
 8000e14:	f003 031b 	and.w	r3, r3, #27
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d14d      	bne.n	8000eb8 <MFRC522_ToCard+0x190>
			status = MI_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8000e20:	7d3a      	ldrb	r2, [r7, #20]
 8000e22:	7dbb      	ldrb	r3, [r7, #22]
 8000e24:	4013      	ands	r3, r2
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MFRC522_ToCard+0x10c>
 8000e30:	2301      	movs	r3, #1
 8000e32:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	2b0c      	cmp	r3, #12
 8000e38:	d140      	bne.n	8000ebc <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8000e3a:	200a      	movs	r0, #10
 8000e3c:	f7ff fec4 	bl	8000bc8 <MFRC522_ReadRegister>
 8000e40:	4603      	mov	r3, r0
 8000e42:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8000e44:	200c      	movs	r0, #12
 8000e46:	f7ff febf 	bl	8000bc8 <MFRC522_ReadRegister>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f003 0307 	and.w	r3, r3, #7
 8000e50:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8000e52:	7c7b      	ldrb	r3, [r7, #17]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d00b      	beq.n	8000e70 <MFRC522_ToCard+0x148>
 8000e58:	7d3b      	ldrb	r3, [r7, #20]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	7c7b      	ldrb	r3, [r7, #17]
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	4413      	add	r3, r2
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6c:	801a      	strh	r2, [r3, #0]
 8000e6e:	e005      	b.n	8000e7c <MFRC522_ToCard+0x154>
 8000e70:	7d3b      	ldrb	r3, [r7, #20]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e7a:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8000e7c:	7d3b      	ldrb	r3, [r7, #20]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <MFRC522_ToCard+0x15e>
 8000e82:	2301      	movs	r3, #1
 8000e84:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8000e86:	7d3b      	ldrb	r3, [r7, #20]
 8000e88:	2b10      	cmp	r3, #16
 8000e8a:	d901      	bls.n	8000e90 <MFRC522_ToCard+0x168>
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8000e90:	2300      	movs	r3, #0
 8000e92:	827b      	strh	r3, [r7, #18]
 8000e94:	e00a      	b.n	8000eac <MFRC522_ToCard+0x184>
 8000e96:	8a7b      	ldrh	r3, [r7, #18]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	18d4      	adds	r4, r2, r3
 8000e9c:	2009      	movs	r0, #9
 8000e9e:	f7ff fe93 	bl	8000bc8 <MFRC522_ReadRegister>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	7023      	strb	r3, [r4, #0]
 8000ea6:	8a7b      	ldrh	r3, [r7, #18]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	827b      	strh	r3, [r7, #18]
 8000eac:	7d3b      	ldrb	r3, [r7, #20]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	8a7a      	ldrh	r2, [r7, #18]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d3ef      	bcc.n	8000e96 <MFRC522_ToCard+0x16e>
 8000eb6:	e001      	b.n	8000ebc <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8000ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	371c      	adds	r7, #28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd90      	pop	{r4, r7, pc}

08000ec6 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af02      	add	r7, sp, #8
 8000ecc:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	200d      	movs	r0, #13
 8000ed6:	f7ff fe5f 	bl	8000b98 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2293      	movs	r2, #147	; 0x93
 8000ede:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	2220      	movs	r2, #32
 8000ee6:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000ee8:	f107 030a 	add.w	r3, r7, #10
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	200c      	movs	r0, #12
 8000ef6:	f7ff ff17 	bl	8000d28 <MFRC522_ToCard>
 8000efa:	4603      	mov	r3, r0
 8000efc:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d118      	bne.n	8000f36 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8000f04:	2300      	movs	r3, #0
 8000f06:	73bb      	strb	r3, [r7, #14]
 8000f08:	e009      	b.n	8000f1e <MFRC522_Anticoll+0x58>
 8000f0a:	7bbb      	ldrb	r3, [r7, #14]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	4413      	add	r3, r2
 8000f10:	781a      	ldrb	r2, [r3, #0]
 8000f12:	7b7b      	ldrb	r3, [r7, #13]
 8000f14:	4053      	eors	r3, r2
 8000f16:	737b      	strb	r3, [r7, #13]
 8000f18:	7bbb      	ldrb	r3, [r7, #14]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	73bb      	strb	r3, [r7, #14]
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d9f2      	bls.n	8000f0a <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8000f24:	7bbb      	ldrb	r3, [r7, #14]
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	7b7a      	ldrb	r2, [r7, #13]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d001      	beq.n	8000f36 <MFRC522_Anticoll+0x70>
 8000f32:	2302      	movs	r3, #2
 8000f34:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
} 
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8000f4e:	2104      	movs	r1, #4
 8000f50:	2005      	movs	r0, #5
 8000f52:	f7ff fea6 	bl	8000ca2 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 8000f56:	2180      	movs	r1, #128	; 0x80
 8000f58:	200a      	movs	r0, #10
 8000f5a:	f7ff fe88 	bl	8000c6e <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8000f5e:	2300      	movs	r3, #0
 8000f60:	75fb      	strb	r3, [r7, #23]
 8000f62:	e00a      	b.n	8000f7a <MFRC522_CalculateCRC+0x3a>
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	2009      	movs	r0, #9
 8000f70:	f7ff fe12 	bl	8000b98 <MFRC522_WriteRegister>
 8000f74:	7dfb      	ldrb	r3, [r7, #23]
 8000f76:	3301      	adds	r3, #1
 8000f78:	75fb      	strb	r3, [r7, #23]
 8000f7a:	7dfa      	ldrb	r2, [r7, #23]
 8000f7c:	7afb      	ldrb	r3, [r7, #11]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d3f0      	bcc.n	8000f64 <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8000f82:	2103      	movs	r1, #3
 8000f84:	2001      	movs	r0, #1
 8000f86:	f7ff fe07 	bl	8000b98 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 8000f8a:	23ff      	movs	r3, #255	; 0xff
 8000f8c:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8000f8e:	2005      	movs	r0, #5
 8000f90:	f7ff fe1a 	bl	8000bc8 <MFRC522_ReadRegister>
 8000f94:	4603      	mov	r3, r0
 8000f96:	75bb      	strb	r3, [r7, #22]
		i--;
 8000f98:	7dfb      	ldrb	r3, [r7, #23]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 8000f9e:	7dfb      	ldrb	r3, [r7, #23]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d004      	beq.n	8000fae <MFRC522_CalculateCRC+0x6e>
 8000fa4:	7dbb      	ldrb	r3, [r7, #22]
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0ef      	beq.n	8000f8e <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8000fae:	2022      	movs	r0, #34	; 0x22
 8000fb0:	f7ff fe0a 	bl	8000bc8 <MFRC522_ReadRegister>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	1c5c      	adds	r4, r3, #1
 8000fc0:	2021      	movs	r0, #33	; 0x21
 8000fc2:	f7ff fe01 	bl	8000bc8 <MFRC522_ReadRegister>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	7023      	strb	r3, [r4, #0]
}
 8000fca:	bf00      	nop
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd90      	pop	{r4, r7, pc}

08000fd2 <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8000fd6:	f000 f820 	bl	800101a <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8000fda:	218d      	movs	r1, #141	; 0x8d
 8000fdc:	202a      	movs	r0, #42	; 0x2a
 8000fde:	f7ff fddb 	bl	8000b98 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8000fe2:	213e      	movs	r1, #62	; 0x3e
 8000fe4:	202b      	movs	r0, #43	; 0x2b
 8000fe6:	f7ff fdd7 	bl	8000b98 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8000fea:	211e      	movs	r1, #30
 8000fec:	202d      	movs	r0, #45	; 0x2d
 8000fee:	f7ff fdd3 	bl	8000b98 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	202c      	movs	r0, #44	; 0x2c
 8000ff6:	f7ff fdcf 	bl	8000b98 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 8000ffa:	2170      	movs	r1, #112	; 0x70
 8000ffc:	2026      	movs	r0, #38	; 0x26
 8000ffe:	f7ff fdcb 	bl	8000b98 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001002:	2140      	movs	r1, #64	; 0x40
 8001004:	2015      	movs	r0, #21
 8001006:	f7ff fdc7 	bl	8000b98 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 800100a:	213d      	movs	r1, #61	; 0x3d
 800100c:	2011      	movs	r0, #17
 800100e:	f7ff fdc3 	bl	8000b98 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 8001012:	f000 f80a 	bl	800102a <MFRC522_AntennaOn>
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}

0800101a <MFRC522_Reset>:

void MFRC522_Reset(void) {
 800101a:	b580      	push	{r7, lr}
 800101c:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 800101e:	210f      	movs	r1, #15
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff fdb9 	bl	8000b98 <MFRC522_WriteRegister>
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}

0800102a <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001030:	2014      	movs	r0, #20
 8001032:	f7ff fdc9 	bl	8000bc8 <MFRC522_ReadRegister>
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d103      	bne.n	800104c <MFRC522_AntennaOn+0x22>
 8001044:	2103      	movs	r1, #3
 8001046:	2014      	movs	r0, #20
 8001048:	f7ff fe11 	bl	8000c6e <MFRC522_SetBitMask>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 800105a:	2350      	movs	r3, #80	; 0x50
 800105c:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001062:	463b      	mov	r3, r7
 8001064:	1c9a      	adds	r2, r3, #2
 8001066:	463b      	mov	r3, r7
 8001068:	2102      	movs	r1, #2
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff68 	bl	8000f40 <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001070:	463a      	mov	r2, r7
 8001072:	4639      	mov	r1, r7
 8001074:	1dbb      	adds	r3, r7, #6
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	4613      	mov	r3, r2
 800107a:	2204      	movs	r2, #4
 800107c:	200c      	movs	r0, #12
 800107e:	f7ff fe53 	bl	8000d28 <MFRC522_ToCard>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_MspInit+0x5c>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <HAL_MspInit+0x5c>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6193      	str	r3, [r2, #24]
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_MspInit+0x5c>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_MspInit+0x5c>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <HAL_MspInit+0x5c>)
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b4:	61d3      	str	r3, [r2, #28]
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <HAL_MspInit+0x5c>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_MspInit+0x60>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_MspInit+0x60>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40010000 	.word	0x40010000

080010f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0318 	add.w	r3, r7, #24
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a37      	ldr	r2, [pc, #220]	; (80011e8 <HAL_SPI_MspInit+0xf8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d130      	bne.n	8001172 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001110:	4b36      	ldr	r3, [pc, #216]	; (80011ec <HAL_SPI_MspInit+0xfc>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a35      	ldr	r2, [pc, #212]	; (80011ec <HAL_SPI_MspInit+0xfc>)
 8001116:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b33      	ldr	r3, [pc, #204]	; (80011ec <HAL_SPI_MspInit+0xfc>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b30      	ldr	r3, [pc, #192]	; (80011ec <HAL_SPI_MspInit+0xfc>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a2f      	ldr	r2, [pc, #188]	; (80011ec <HAL_SPI_MspInit+0xfc>)
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <HAL_SPI_MspInit+0xfc>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001140:	23a0      	movs	r3, #160	; 0xa0
 8001142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	4619      	mov	r1, r3
 8001152:	4827      	ldr	r0, [pc, #156]	; (80011f0 <HAL_SPI_MspInit+0x100>)
 8001154:	f000 fb36 	bl	80017c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001158:	2340      	movs	r3, #64	; 0x40
 800115a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0318 	add.w	r3, r7, #24
 8001168:	4619      	mov	r1, r3
 800116a:	4821      	ldr	r0, [pc, #132]	; (80011f0 <HAL_SPI_MspInit+0x100>)
 800116c:	f000 fb2a 	bl	80017c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001170:	e036      	b.n	80011e0 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a1f      	ldr	r2, [pc, #124]	; (80011f4 <HAL_SPI_MspInit+0x104>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d131      	bne.n	80011e0 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <HAL_SPI_MspInit+0xfc>)
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	4a1a      	ldr	r2, [pc, #104]	; (80011ec <HAL_SPI_MspInit+0xfc>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001186:	61d3      	str	r3, [r2, #28]
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <HAL_SPI_MspInit+0xfc>)
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_SPI_MspInit+0xfc>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a14      	ldr	r2, [pc, #80]	; (80011ec <HAL_SPI_MspInit+0xfc>)
 800119a:	f043 0308 	orr.w	r3, r3, #8
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_SPI_MspInit+0xfc>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80011ac:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ba:	f107 0318 	add.w	r3, r7, #24
 80011be:	4619      	mov	r1, r3
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <HAL_SPI_MspInit+0x108>)
 80011c2:	f000 faff 	bl	80017c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	f107 0318 	add.w	r3, r7, #24
 80011d8:	4619      	mov	r1, r3
 80011da:	4807      	ldr	r0, [pc, #28]	; (80011f8 <HAL_SPI_MspInit+0x108>)
 80011dc:	f000 faf2 	bl	80017c4 <HAL_GPIO_Init>
}
 80011e0:	bf00      	nop
 80011e2:	3728      	adds	r7, #40	; 0x28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40013000 	.word	0x40013000
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010800 	.word	0x40010800
 80011f4:	40003800 	.word	0x40003800
 80011f8:	40010c00 	.word	0x40010c00

080011fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800120c:	d10b      	bne.n	8001226 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_TIM_Base_MspInit+0x34>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_TIM_Base_MspInit+0x34>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	61d3      	str	r3, [r2, #28]
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_TIM_Base_MspInit+0x34>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001226:	bf00      	nop
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	40021000 	.word	0x40021000

08001234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a1c      	ldr	r2, [pc, #112]	; (80012c0 <HAL_UART_MspInit+0x8c>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d131      	bne.n	80012b8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <HAL_UART_MspInit+0x90>)
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	4a1a      	ldr	r2, [pc, #104]	; (80012c4 <HAL_UART_MspInit+0x90>)
 800125a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800125e:	61d3      	str	r3, [r2, #28]
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <HAL_UART_MspInit+0x90>)
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_UART_MspInit+0x90>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <HAL_UART_MspInit+0x90>)
 8001272:	f043 0308 	orr.w	r3, r3, #8
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_UART_MspInit+0x90>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001288:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	4619      	mov	r1, r3
 8001298:	480b      	ldr	r0, [pc, #44]	; (80012c8 <HAL_UART_MspInit+0x94>)
 800129a:	f000 fa93 	bl	80017c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800129e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	4619      	mov	r1, r3
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <HAL_UART_MspInit+0x94>)
 80012b4:	f000 fa86 	bl	80017c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012b8:	bf00      	nop
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40004800 	.word	0x40004800
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010c00 	.word	0x40010c00

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <NMI_Handler+0x4>

080012d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <MemManage_Handler+0x4>

080012de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <BusFault_Handler+0x4>

080012e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <UsageFault_Handler+0x4>

080012ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr

080012f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001312:	f000 f893 	bl	800143c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <TIM2_IRQHandler+0x10>)
 8001322:	f001 fdcd 	bl	8002ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000160 	.word	0x20000160

08001330 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <SPI2_IRQHandler+0x10>)
 8001336:	f001 fb77 	bl	8002a28 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000050 	.word	0x20000050

08001344 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <USART3_IRQHandler+0x10>)
 800134a:	f002 f9f7 	bl	800373c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200000a8 	.word	0x200000a8

08001358 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001364:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001366:	e003      	b.n	8001370 <LoopCopyDataInit>

08001368 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800136a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800136c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800136e:	3104      	adds	r1, #4

08001370 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001370:	480a      	ldr	r0, [pc, #40]	; (800139c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001374:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001376:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001378:	d3f6      	bcc.n	8001368 <CopyDataInit>
  ldr r2, =_sbss
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800137c:	e002      	b.n	8001384 <LoopFillZerobss>

0800137e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001380:	f842 3b04 	str.w	r3, [r2], #4

08001384 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001386:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001388:	d3f9      	bcc.n	800137e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800138a:	f7ff ffe5 	bl	8001358 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138e:	f002 fc8d 	bl	8003cac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001392:	f7ff f95b 	bl	800064c <main>
  bx lr
 8001396:	4770      	bx	lr
  ldr r3, =_sidata
 8001398:	08003d54 	.word	0x08003d54
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013a0:	20000028 	.word	0x20000028
  ldr r2, =_sbss
 80013a4:	20000028 	.word	0x20000028
  ldr r3, = _ebss
 80013a8:	200001b4 	.word	0x200001b4

080013ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC1_2_IRQHandler>
	...

080013b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_Init+0x28>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <HAL_Init+0x28>)
 80013ba:	f043 0310 	orr.w	r3, r3, #16
 80013be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c0:	2003      	movs	r0, #3
 80013c2:	f000 f947 	bl	8001654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c6:	2000      	movs	r0, #0
 80013c8:	f000 f808 	bl	80013dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013cc:	f7ff fe5e 	bl	800108c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40022000 	.word	0x40022000

080013dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_InitTick+0x54>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_InitTick+0x58>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f95f 	bl	80016be <HAL_SYSTICK_Config>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e00e      	b.n	8001428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b0f      	cmp	r3, #15
 800140e:	d80a      	bhi.n	8001426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001410:	2200      	movs	r2, #0
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f000 f927 	bl	800166a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800141c:	4a06      	ldr	r2, [pc, #24]	; (8001438 <HAL_InitTick+0x5c>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e000      	b.n	8001428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000001c 	.word	0x2000001c
 8001434:	20000024 	.word	0x20000024
 8001438:	20000020 	.word	0x20000020

0800143c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_IncTick+0x1c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <HAL_IncTick+0x20>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4413      	add	r3, r2
 800144c:	4a03      	ldr	r2, [pc, #12]	; (800145c <HAL_IncTick+0x20>)
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	20000024 	.word	0x20000024
 800145c:	200001b0 	.word	0x200001b0

08001460 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b02      	ldr	r3, [pc, #8]	; (8001470 <HAL_GetTick+0x10>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	200001b0 	.word	0x200001b0

08001474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800147c:	f7ff fff0 	bl	8001460 <HAL_GetTick>
 8001480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148c:	d005      	beq.n	800149a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_Delay+0x44>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4413      	add	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800149a:	bf00      	nop
 800149c:	f7ff ffe0 	bl	8001460 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d8f7      	bhi.n	800149c <HAL_Delay+0x28>
  {
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000024 	.word	0x20000024

080014bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d8:	4013      	ands	r3, r2
 80014da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	60d3      	str	r3, [r2, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <__NVIC_GetPriorityGrouping+0x18>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	f003 0307 	and.w	r3, r3, #7
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	2b00      	cmp	r3, #0
 8001530:	db0b      	blt.n	800154a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	f003 021f 	and.w	r2, r3, #31
 8001538:	4906      	ldr	r1, [pc, #24]	; (8001554 <__NVIC_EnableIRQ+0x34>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	095b      	lsrs	r3, r3, #5
 8001540:	2001      	movs	r0, #1
 8001542:	fa00 f202 	lsl.w	r2, r0, r2
 8001546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100

08001558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	db0a      	blt.n	8001582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	490c      	ldr	r1, [pc, #48]	; (80015a4 <__NVIC_SetPriority+0x4c>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	0112      	lsls	r2, r2, #4
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	440b      	add	r3, r1
 800157c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001580:	e00a      	b.n	8001598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4908      	ldr	r1, [pc, #32]	; (80015a8 <__NVIC_SetPriority+0x50>)
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	3b04      	subs	r3, #4
 8001590:	0112      	lsls	r2, r2, #4
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	440b      	add	r3, r1
 8001596:	761a      	strb	r2, [r3, #24]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000e100 	.word	0xe000e100
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	; 0x24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f1c3 0307 	rsb	r3, r3, #7
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	bf28      	it	cs
 80015ca:	2304      	movcs	r3, #4
 80015cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3304      	adds	r3, #4
 80015d2:	2b06      	cmp	r3, #6
 80015d4:	d902      	bls.n	80015dc <NVIC_EncodePriority+0x30>
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3b03      	subs	r3, #3
 80015da:	e000      	b.n	80015de <NVIC_EncodePriority+0x32>
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	f04f 32ff 	mov.w	r2, #4294967295
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	401a      	ands	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f4:	f04f 31ff 	mov.w	r1, #4294967295
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43d9      	mvns	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	4313      	orrs	r3, r2
         );
}
 8001606:	4618      	mov	r0, r3
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001620:	d301      	bcc.n	8001626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001622:	2301      	movs	r3, #1
 8001624:	e00f      	b.n	8001646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <SysTick_Config+0x40>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162e:	210f      	movs	r1, #15
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f7ff ff90 	bl	8001558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <SysTick_Config+0x40>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163e:	4b04      	ldr	r3, [pc, #16]	; (8001650 <SysTick_Config+0x40>)
 8001640:	2207      	movs	r2, #7
 8001642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	e000e010 	.word	0xe000e010

08001654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff2d 	bl	80014bc <__NVIC_SetPriorityGrouping>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800167c:	f7ff ff42 	bl	8001504 <__NVIC_GetPriorityGrouping>
 8001680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	6978      	ldr	r0, [r7, #20]
 8001688:	f7ff ff90 	bl	80015ac <NVIC_EncodePriority>
 800168c:	4602      	mov	r2, r0
 800168e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff5f 	bl	8001558 <__NVIC_SetPriority>
}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff35 	bl	8001520 <__NVIC_EnableIRQ>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ffa2 	bl	8001610 <SysTick_Config>
 80016cc:	4603      	mov	r3, r0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d005      	beq.n	80016fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2204      	movs	r2, #4
 80016f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	e051      	b.n	800179e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 020e 	bic.w	r2, r2, #14
 8001708:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0201 	bic.w	r2, r2, #1
 8001718:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a22      	ldr	r2, [pc, #136]	; (80017a8 <HAL_DMA_Abort_IT+0xd0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d029      	beq.n	8001778 <HAL_DMA_Abort_IT+0xa0>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a20      	ldr	r2, [pc, #128]	; (80017ac <HAL_DMA_Abort_IT+0xd4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d022      	beq.n	8001774 <HAL_DMA_Abort_IT+0x9c>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1f      	ldr	r2, [pc, #124]	; (80017b0 <HAL_DMA_Abort_IT+0xd8>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d01a      	beq.n	800176e <HAL_DMA_Abort_IT+0x96>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <HAL_DMA_Abort_IT+0xdc>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d012      	beq.n	8001768 <HAL_DMA_Abort_IT+0x90>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <HAL_DMA_Abort_IT+0xe0>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d00a      	beq.n	8001762 <HAL_DMA_Abort_IT+0x8a>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1a      	ldr	r2, [pc, #104]	; (80017bc <HAL_DMA_Abort_IT+0xe4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d102      	bne.n	800175c <HAL_DMA_Abort_IT+0x84>
 8001756:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800175a:	e00e      	b.n	800177a <HAL_DMA_Abort_IT+0xa2>
 800175c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001760:	e00b      	b.n	800177a <HAL_DMA_Abort_IT+0xa2>
 8001762:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001766:	e008      	b.n	800177a <HAL_DMA_Abort_IT+0xa2>
 8001768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176c:	e005      	b.n	800177a <HAL_DMA_Abort_IT+0xa2>
 800176e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001772:	e002      	b.n	800177a <HAL_DMA_Abort_IT+0xa2>
 8001774:	2310      	movs	r3, #16
 8001776:	e000      	b.n	800177a <HAL_DMA_Abort_IT+0xa2>
 8001778:	2301      	movs	r3, #1
 800177a:	4a11      	ldr	r2, [pc, #68]	; (80017c0 <HAL_DMA_Abort_IT+0xe8>)
 800177c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	4798      	blx	r3
    } 
  }
  return status;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40020008 	.word	0x40020008
 80017ac:	4002001c 	.word	0x4002001c
 80017b0:	40020030 	.word	0x40020030
 80017b4:	40020044 	.word	0x40020044
 80017b8:	40020058 	.word	0x40020058
 80017bc:	4002006c 	.word	0x4002006c
 80017c0:	40020000 	.word	0x40020000

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b08b      	sub	sp, #44	; 0x2c
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d6:	e169      	b.n	8001aac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017d8:	2201      	movs	r2, #1
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	f040 8158 	bne.w	8001aa6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4a9a      	ldr	r2, [pc, #616]	; (8001a64 <HAL_GPIO_Init+0x2a0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d05e      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001800:	4a98      	ldr	r2, [pc, #608]	; (8001a64 <HAL_GPIO_Init+0x2a0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d875      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001806:	4a98      	ldr	r2, [pc, #608]	; (8001a68 <HAL_GPIO_Init+0x2a4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d058      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 800180c:	4a96      	ldr	r2, [pc, #600]	; (8001a68 <HAL_GPIO_Init+0x2a4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d86f      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001812:	4a96      	ldr	r2, [pc, #600]	; (8001a6c <HAL_GPIO_Init+0x2a8>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d052      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001818:	4a94      	ldr	r2, [pc, #592]	; (8001a6c <HAL_GPIO_Init+0x2a8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d869      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800181e:	4a94      	ldr	r2, [pc, #592]	; (8001a70 <HAL_GPIO_Init+0x2ac>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d04c      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001824:	4a92      	ldr	r2, [pc, #584]	; (8001a70 <HAL_GPIO_Init+0x2ac>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d863      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800182a:	4a92      	ldr	r2, [pc, #584]	; (8001a74 <HAL_GPIO_Init+0x2b0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d046      	beq.n	80018be <HAL_GPIO_Init+0xfa>
 8001830:	4a90      	ldr	r2, [pc, #576]	; (8001a74 <HAL_GPIO_Init+0x2b0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d85d      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 8001836:	2b12      	cmp	r3, #18
 8001838:	d82a      	bhi.n	8001890 <HAL_GPIO_Init+0xcc>
 800183a:	2b12      	cmp	r3, #18
 800183c:	d859      	bhi.n	80018f2 <HAL_GPIO_Init+0x12e>
 800183e:	a201      	add	r2, pc, #4	; (adr r2, 8001844 <HAL_GPIO_Init+0x80>)
 8001840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001844:	080018bf 	.word	0x080018bf
 8001848:	08001899 	.word	0x08001899
 800184c:	080018ab 	.word	0x080018ab
 8001850:	080018ed 	.word	0x080018ed
 8001854:	080018f3 	.word	0x080018f3
 8001858:	080018f3 	.word	0x080018f3
 800185c:	080018f3 	.word	0x080018f3
 8001860:	080018f3 	.word	0x080018f3
 8001864:	080018f3 	.word	0x080018f3
 8001868:	080018f3 	.word	0x080018f3
 800186c:	080018f3 	.word	0x080018f3
 8001870:	080018f3 	.word	0x080018f3
 8001874:	080018f3 	.word	0x080018f3
 8001878:	080018f3 	.word	0x080018f3
 800187c:	080018f3 	.word	0x080018f3
 8001880:	080018f3 	.word	0x080018f3
 8001884:	080018f3 	.word	0x080018f3
 8001888:	080018a1 	.word	0x080018a1
 800188c:	080018b5 	.word	0x080018b5
 8001890:	4a79      	ldr	r2, [pc, #484]	; (8001a78 <HAL_GPIO_Init+0x2b4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001896:	e02c      	b.n	80018f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	623b      	str	r3, [r7, #32]
          break;
 800189e:	e029      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	3304      	adds	r3, #4
 80018a6:	623b      	str	r3, [r7, #32]
          break;
 80018a8:	e024      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	3308      	adds	r3, #8
 80018b0:	623b      	str	r3, [r7, #32]
          break;
 80018b2:	e01f      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	330c      	adds	r3, #12
 80018ba:	623b      	str	r3, [r7, #32]
          break;
 80018bc:	e01a      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d102      	bne.n	80018cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018c6:	2304      	movs	r3, #4
 80018c8:	623b      	str	r3, [r7, #32]
          break;
 80018ca:	e013      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d105      	bne.n	80018e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d4:	2308      	movs	r3, #8
 80018d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	611a      	str	r2, [r3, #16]
          break;
 80018de:	e009      	b.n	80018f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e0:	2308      	movs	r3, #8
 80018e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	615a      	str	r2, [r3, #20]
          break;
 80018ea:	e003      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
          break;
 80018f0:	e000      	b.n	80018f4 <HAL_GPIO_Init+0x130>
          break;
 80018f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2bff      	cmp	r3, #255	; 0xff
 80018f8:	d801      	bhi.n	80018fe <HAL_GPIO_Init+0x13a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	e001      	b.n	8001902 <HAL_GPIO_Init+0x13e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3304      	adds	r3, #4
 8001902:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2bff      	cmp	r3, #255	; 0xff
 8001908:	d802      	bhi.n	8001910 <HAL_GPIO_Init+0x14c>
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	e002      	b.n	8001916 <HAL_GPIO_Init+0x152>
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	3b08      	subs	r3, #8
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	210f      	movs	r1, #15
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	401a      	ands	r2, r3
 8001928:	6a39      	ldr	r1, [r7, #32]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	431a      	orrs	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80b1 	beq.w	8001aa6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001944:	4b4d      	ldr	r3, [pc, #308]	; (8001a7c <HAL_GPIO_Init+0x2b8>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a4c      	ldr	r2, [pc, #304]	; (8001a7c <HAL_GPIO_Init+0x2b8>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b4a      	ldr	r3, [pc, #296]	; (8001a7c <HAL_GPIO_Init+0x2b8>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800195c:	4a48      	ldr	r2, [pc, #288]	; (8001a80 <HAL_GPIO_Init+0x2bc>)
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001968:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4013      	ands	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a40      	ldr	r2, [pc, #256]	; (8001a84 <HAL_GPIO_Init+0x2c0>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d013      	beq.n	80019b0 <HAL_GPIO_Init+0x1ec>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a3f      	ldr	r2, [pc, #252]	; (8001a88 <HAL_GPIO_Init+0x2c4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d00d      	beq.n	80019ac <HAL_GPIO_Init+0x1e8>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a3e      	ldr	r2, [pc, #248]	; (8001a8c <HAL_GPIO_Init+0x2c8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d007      	beq.n	80019a8 <HAL_GPIO_Init+0x1e4>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a3d      	ldr	r2, [pc, #244]	; (8001a90 <HAL_GPIO_Init+0x2cc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d101      	bne.n	80019a4 <HAL_GPIO_Init+0x1e0>
 80019a0:	2303      	movs	r3, #3
 80019a2:	e006      	b.n	80019b2 <HAL_GPIO_Init+0x1ee>
 80019a4:	2304      	movs	r3, #4
 80019a6:	e004      	b.n	80019b2 <HAL_GPIO_Init+0x1ee>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e002      	b.n	80019b2 <HAL_GPIO_Init+0x1ee>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <HAL_GPIO_Init+0x1ee>
 80019b0:	2300      	movs	r3, #0
 80019b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b4:	f002 0203 	and.w	r2, r2, #3
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	4093      	lsls	r3, r2
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4313      	orrs	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019c2:	492f      	ldr	r1, [pc, #188]	; (8001a80 <HAL_GPIO_Init+0x2bc>)
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019dc:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	492c      	ldr	r1, [pc, #176]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	600b      	str	r3, [r1, #0]
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019ea:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	4928      	ldr	r1, [pc, #160]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d006      	beq.n	8001a12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	4922      	ldr	r1, [pc, #136]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
 8001a10:	e006      	b.n	8001a20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	491e      	ldr	r1, [pc, #120]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d006      	beq.n	8001a3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	4918      	ldr	r1, [pc, #96]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	608b      	str	r3, [r1, #8]
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	4914      	ldr	r1, [pc, #80]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d021      	beq.n	8001a98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	490e      	ldr	r1, [pc, #56]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	60cb      	str	r3, [r1, #12]
 8001a60:	e021      	b.n	8001aa6 <HAL_GPIO_Init+0x2e2>
 8001a62:	bf00      	nop
 8001a64:	10320000 	.word	0x10320000
 8001a68:	10310000 	.word	0x10310000
 8001a6c:	10220000 	.word	0x10220000
 8001a70:	10210000 	.word	0x10210000
 8001a74:	10120000 	.word	0x10120000
 8001a78:	10110000 	.word	0x10110000
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40010000 	.word	0x40010000
 8001a84:	40010800 	.word	0x40010800
 8001a88:	40010c00 	.word	0x40010c00
 8001a8c:	40011000 	.word	0x40011000
 8001a90:	40011400 	.word	0x40011400
 8001a94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	4909      	ldr	r1, [pc, #36]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f47f ae8e 	bne.w	80017d8 <HAL_GPIO_Init+0x14>
  }
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	372c      	adds	r7, #44	; 0x2c
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	40010400 	.word	0x40010400

08001acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001adc:	787b      	ldrb	r3, [r7, #1]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae2:	887a      	ldrh	r2, [r7, #2]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ae8:	e003      	b.n	8001af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aea:	887b      	ldrh	r3, [r7, #2]
 8001aec:	041a      	lsls	r2, r3, #16
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	611a      	str	r2, [r3, #16]
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4013      	ands	r3, r2
 8001b14:	041a      	lsls	r2, r3, #16
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	43d9      	mvns	r1, r3
 8001b1a:	887b      	ldrh	r3, [r7, #2]
 8001b1c:	400b      	ands	r3, r1
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	611a      	str	r2, [r3, #16]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
	...

08001b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e26c      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8087 	beq.w	8001c5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b50:	4b92      	ldr	r3, [pc, #584]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d00c      	beq.n	8001b76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b5c:	4b8f      	ldr	r3, [pc, #572]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d112      	bne.n	8001b8e <HAL_RCC_OscConfig+0x5e>
 8001b68:	4b8c      	ldr	r3, [pc, #560]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b74:	d10b      	bne.n	8001b8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b76:	4b89      	ldr	r3, [pc, #548]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d06c      	beq.n	8001c5c <HAL_RCC_OscConfig+0x12c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d168      	bne.n	8001c5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e246      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x76>
 8001b98:	4b80      	ldr	r3, [pc, #512]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a7f      	ldr	r2, [pc, #508]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e02e      	b.n	8001c04 <HAL_RCC_OscConfig+0xd4>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x98>
 8001bae:	4b7b      	ldr	r3, [pc, #492]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a7a      	ldr	r2, [pc, #488]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b78      	ldr	r3, [pc, #480]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a77      	ldr	r2, [pc, #476]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e01d      	b.n	8001c04 <HAL_RCC_OscConfig+0xd4>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0xbc>
 8001bd2:	4b72      	ldr	r3, [pc, #456]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a71      	ldr	r2, [pc, #452]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	4b6f      	ldr	r3, [pc, #444]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a6e      	ldr	r2, [pc, #440]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_OscConfig+0xd4>
 8001bec:	4b6b      	ldr	r3, [pc, #428]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a6a      	ldr	r2, [pc, #424]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b68      	ldr	r3, [pc, #416]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a67      	ldr	r2, [pc, #412]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d013      	beq.n	8001c34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fc28 	bl	8001460 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff fc24 	bl	8001460 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e1fa      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	4b5d      	ldr	r3, [pc, #372]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0xe4>
 8001c32:	e014      	b.n	8001c5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff fc14 	bl	8001460 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7ff fc10 	bl	8001460 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e1e6      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4e:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x10c>
 8001c5a:	e000      	b.n	8001c5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d063      	beq.n	8001d32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c6a:	4b4c      	ldr	r3, [pc, #304]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00b      	beq.n	8001c8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c76:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d11c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x18c>
 8001c82:	4b46      	ldr	r3, [pc, #280]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d116      	bne.n	8001cbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8e:	4b43      	ldr	r3, [pc, #268]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d005      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x176>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d001      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e1ba      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca6:	4b3d      	ldr	r3, [pc, #244]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4939      	ldr	r1, [pc, #228]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cba:	e03a      	b.n	8001d32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d020      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc4:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7ff fbc9 	bl	8001460 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd2:	f7ff fbc5 	bl	8001460 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e19b      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce4:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf0:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4927      	ldr	r1, [pc, #156]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	600b      	str	r3, [r1, #0]
 8001d04:	e015      	b.n	8001d32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fba8 	bl	8001460 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d14:	f7ff fba4 	bl	8001460 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e17a      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d26:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d03a      	beq.n	8001db4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d019      	beq.n	8001d7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d46:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <HAL_RCC_OscConfig+0x274>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4c:	f7ff fb88 	bl	8001460 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d54:	f7ff fb84 	bl	8001460 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e15a      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d72:	2001      	movs	r0, #1
 8001d74:	f000 fad8 	bl	8002328 <RCC_Delay>
 8001d78:	e01c      	b.n	8001db4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d80:	f7ff fb6e 	bl	8001460 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d86:	e00f      	b.n	8001da8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d88:	f7ff fb6a 	bl	8001460 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d908      	bls.n	8001da8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e140      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	42420000 	.word	0x42420000
 8001da4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da8:	4b9e      	ldr	r3, [pc, #632]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e9      	bne.n	8001d88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80a6 	beq.w	8001f0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc6:	4b97      	ldr	r3, [pc, #604]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10d      	bne.n	8001dee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	4b94      	ldr	r3, [pc, #592]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	4a93      	ldr	r2, [pc, #588]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	61d3      	str	r3, [r2, #28]
 8001dde:	4b91      	ldr	r3, [pc, #580]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dea:	2301      	movs	r3, #1
 8001dec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dee:	4b8e      	ldr	r3, [pc, #568]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d118      	bne.n	8001e2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfa:	4b8b      	ldr	r3, [pc, #556]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a8a      	ldr	r2, [pc, #552]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e06:	f7ff fb2b 	bl	8001460 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0e:	f7ff fb27 	bl	8001460 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b64      	cmp	r3, #100	; 0x64
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e0fd      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	4b81      	ldr	r3, [pc, #516]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x312>
 8001e34:	4b7b      	ldr	r3, [pc, #492]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4a7a      	ldr	r2, [pc, #488]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6213      	str	r3, [r2, #32]
 8001e40:	e02d      	b.n	8001e9e <HAL_RCC_OscConfig+0x36e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x334>
 8001e4a:	4b76      	ldr	r3, [pc, #472]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4a75      	ldr	r2, [pc, #468]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	6213      	str	r3, [r2, #32]
 8001e56:	4b73      	ldr	r3, [pc, #460]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a72      	ldr	r2, [pc, #456]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	f023 0304 	bic.w	r3, r3, #4
 8001e60:	6213      	str	r3, [r2, #32]
 8001e62:	e01c      	b.n	8001e9e <HAL_RCC_OscConfig+0x36e>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b05      	cmp	r3, #5
 8001e6a:	d10c      	bne.n	8001e86 <HAL_RCC_OscConfig+0x356>
 8001e6c:	4b6d      	ldr	r3, [pc, #436]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4a6c      	ldr	r2, [pc, #432]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e72:	f043 0304 	orr.w	r3, r3, #4
 8001e76:	6213      	str	r3, [r2, #32]
 8001e78:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4a69      	ldr	r2, [pc, #420]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6213      	str	r3, [r2, #32]
 8001e84:	e00b      	b.n	8001e9e <HAL_RCC_OscConfig+0x36e>
 8001e86:	4b67      	ldr	r3, [pc, #412]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	4a66      	ldr	r2, [pc, #408]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	f023 0301 	bic.w	r3, r3, #1
 8001e90:	6213      	str	r3, [r2, #32]
 8001e92:	4b64      	ldr	r3, [pc, #400]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4a63      	ldr	r2, [pc, #396]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	f023 0304 	bic.w	r3, r3, #4
 8001e9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d015      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fadb 	bl	8001460 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7ff fad7 	bl	8001460 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e0ab      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec4:	4b57      	ldr	r3, [pc, #348]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0ee      	beq.n	8001eae <HAL_RCC_OscConfig+0x37e>
 8001ed0:	e014      	b.n	8001efc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed2:	f7ff fac5 	bl	8001460 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f7ff fac1 	bl	8001460 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e095      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef0:	4b4c      	ldr	r3, [pc, #304]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1ee      	bne.n	8001eda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001efc:	7dfb      	ldrb	r3, [r7, #23]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d105      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f02:	4b48      	ldr	r3, [pc, #288]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	4a47      	ldr	r2, [pc, #284]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 8081 	beq.w	800201a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f18:	4b42      	ldr	r3, [pc, #264]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 030c 	and.w	r3, r3, #12
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d061      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d146      	bne.n	8001fba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2c:	4b3f      	ldr	r3, [pc, #252]	; (800202c <HAL_RCC_OscConfig+0x4fc>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f32:	f7ff fa95 	bl	8001460 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3a:	f7ff fa91 	bl	8001460 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e067      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4c:	4b35      	ldr	r3, [pc, #212]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f0      	bne.n	8001f3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f60:	d108      	bne.n	8001f74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f62:	4b30      	ldr	r3, [pc, #192]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	492d      	ldr	r1, [pc, #180]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f74:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a19      	ldr	r1, [r3, #32]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4927      	ldr	r1, [pc, #156]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f8c:	4b27      	ldr	r3, [pc, #156]	; (800202c <HAL_RCC_OscConfig+0x4fc>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7ff fa65 	bl	8001460 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9a:	f7ff fa61 	bl	8001460 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e037      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fac:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x46a>
 8001fb8:	e02f      	b.n	800201a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fba:	4b1c      	ldr	r3, [pc, #112]	; (800202c <HAL_RCC_OscConfig+0x4fc>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fa4e 	bl	8001460 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7ff fa4a 	bl	8001460 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e020      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x498>
 8001fe6:	e018      	b.n	800201a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e013      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	429a      	cmp	r2, r3
 8002006:	d106      	bne.n	8002016 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d001      	beq.n	800201a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	40007000 	.word	0x40007000
 800202c:	42420060 	.word	0x42420060

08002030 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0d0      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002044:	4b6a      	ldr	r3, [pc, #424]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d910      	bls.n	8002074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002052:	4b67      	ldr	r3, [pc, #412]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 0207 	bic.w	r2, r3, #7
 800205a:	4965      	ldr	r1, [pc, #404]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b63      	ldr	r3, [pc, #396]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0b8      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d020      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800208c:	4b59      	ldr	r3, [pc, #356]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4a58      	ldr	r2, [pc, #352]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002096:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a4:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4a52      	ldr	r2, [pc, #328]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b0:	4b50      	ldr	r3, [pc, #320]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	494d      	ldr	r1, [pc, #308]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d040      	beq.n	8002150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d115      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e07f      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ee:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d109      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e073      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fe:	4b3d      	ldr	r3, [pc, #244]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e06b      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800210e:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f023 0203 	bic.w	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4936      	ldr	r1, [pc, #216]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002120:	f7ff f99e 	bl	8001460 <HAL_GetTick>
 8002124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	e00a      	b.n	800213e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002128:	f7ff f99a 	bl	8001460 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	; 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e053      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213e:	4b2d      	ldr	r3, [pc, #180]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 020c 	and.w	r2, r3, #12
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	429a      	cmp	r2, r3
 800214e:	d1eb      	bne.n	8002128 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d210      	bcs.n	8002180 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 0207 	bic.w	r2, r3, #7
 8002166:	4922      	ldr	r1, [pc, #136]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e032      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4916      	ldr	r1, [pc, #88]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d009      	beq.n	80021be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	490e      	ldr	r1, [pc, #56]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021be:	f000 f821 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80021c2:	4602      	mov	r2, r0
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	490a      	ldr	r1, [pc, #40]	; (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 80021d0:	5ccb      	ldrb	r3, [r1, r3]
 80021d2:	fa22 f303 	lsr.w	r3, r2, r3
 80021d6:	4a09      	ldr	r2, [pc, #36]	; (80021fc <HAL_RCC_ClockConfig+0x1cc>)
 80021d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_ClockConfig+0x1d0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff f8fc 	bl	80013dc <HAL_InitTick>

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40022000 	.word	0x40022000
 80021f4:	40021000 	.word	0x40021000
 80021f8:	08003d34 	.word	0x08003d34
 80021fc:	2000001c 	.word	0x2000001c
 8002200:	20000020 	.word	0x20000020

08002204 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002204:	b490      	push	{r4, r7}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800220a:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800220c:	1d3c      	adds	r4, r7, #4
 800220e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002214:	f240 2301 	movw	r3, #513	; 0x201
 8002218:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800222e:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b04      	cmp	r3, #4
 800223c:	d002      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x40>
 800223e:	2b08      	cmp	r3, #8
 8002240:	d003      	beq.n	800224a <HAL_RCC_GetSysClockFreq+0x46>
 8002242:	e02d      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002244:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002246:	623b      	str	r3, [r7, #32]
      break;
 8002248:	e02d      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	0c9b      	lsrs	r3, r3, #18
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002256:	4413      	add	r3, r2
 8002258:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800225c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d013      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	0c5b      	lsrs	r3, r3, #17
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002276:	4413      	add	r3, r2
 8002278:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800227c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002282:	fb02 f203 	mul.w	r2, r2, r3
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	fbb2 f3f3 	udiv	r3, r2, r3
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
 800228e:	e004      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002294:	fb02 f303 	mul.w	r3, r2, r3
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	623b      	str	r3, [r7, #32]
      break;
 800229e:	e002      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 80022a2:	623b      	str	r3, [r7, #32]
      break;
 80022a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022a6:	6a3b      	ldr	r3, [r7, #32]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3728      	adds	r7, #40	; 0x28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc90      	pop	{r4, r7}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	08003d24 	.word	0x08003d24
 80022b8:	40021000 	.word	0x40021000
 80022bc:	007a1200 	.word	0x007a1200
 80022c0:	003d0900 	.word	0x003d0900

080022c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c8:	4b02      	ldr	r3, [pc, #8]	; (80022d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr
 80022d4:	2000001c 	.word	0x2000001c

080022d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022dc:	f7ff fff2 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	0a1b      	lsrs	r3, r3, #8
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	4903      	ldr	r1, [pc, #12]	; (80022fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ee:	5ccb      	ldrb	r3, [r1, r3]
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	08003d44 	.word	0x08003d44

08002300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002304:	f7ff ffde 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 8002308:	4602      	mov	r2, r0
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	0adb      	lsrs	r3, r3, #11
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	4903      	ldr	r1, [pc, #12]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002316:	5ccb      	ldrb	r3, [r1, r3]
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	08003d44 	.word	0x08003d44

08002328 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <RCC_Delay+0x34>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <RCC_Delay+0x38>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	0a5b      	lsrs	r3, r3, #9
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002344:	bf00      	nop
  }
  while (Delay --);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1e5a      	subs	r2, r3, #1
 800234a:	60fa      	str	r2, [r7, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f9      	bne.n	8002344 <RCC_Delay+0x1c>
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	2000001c 	.word	0x2000001c
 8002360:	10624dd3 	.word	0x10624dd3

08002364 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e076      	b.n	8002464 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	2b00      	cmp	r3, #0
 800237c:	d108      	bne.n	8002390 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002386:	d009      	beq.n	800239c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]
 800238e:	e005      	b.n	800239c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe fe9a 	bl	80010f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002420:	ea42 0103 	orr.w	r1, r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	0c1a      	lsrs	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f002 0204 	and.w	r2, r2, #4
 8002442:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	69da      	ldr	r2, [r3, #28]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002452:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	4613      	mov	r3, r2
 800247a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_SPI_Transmit+0x22>
 800248a:	2302      	movs	r3, #2
 800248c:	e126      	b.n	80026dc <HAL_SPI_Transmit+0x270>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002496:	f7fe ffe3 	bl	8001460 <HAL_GetTick>
 800249a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d002      	beq.n	80024b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
 80024ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024b0:	e10b      	b.n	80026ca <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <HAL_SPI_Transmit+0x52>
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024c2:	e102      	b.n	80026ca <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2203      	movs	r2, #3
 80024c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	88fa      	ldrh	r2, [r7, #6]
 80024dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	88fa      	ldrh	r2, [r7, #6]
 80024e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800250a:	d10f      	bne.n	800252c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800251a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800252a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002536:	2b40      	cmp	r3, #64	; 0x40
 8002538:	d007      	beq.n	800254a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002548:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002552:	d14b      	bne.n	80025ec <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <HAL_SPI_Transmit+0xf6>
 800255c:	8afb      	ldrh	r3, [r7, #22]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d13e      	bne.n	80025e0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	881a      	ldrh	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	1c9a      	adds	r2, r3, #2
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002586:	e02b      	b.n	80025e0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b02      	cmp	r3, #2
 8002594:	d112      	bne.n	80025bc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	881a      	ldrh	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	1c9a      	adds	r2, r3, #2
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80025ba:	e011      	b.n	80025e0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025bc:	f7fe ff50 	bl	8001460 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d803      	bhi.n	80025d4 <HAL_SPI_Transmit+0x168>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d2:	d102      	bne.n	80025da <HAL_SPI_Transmit+0x16e>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d102      	bne.n	80025e0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025de:	e074      	b.n	80026ca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1ce      	bne.n	8002588 <HAL_SPI_Transmit+0x11c>
 80025ea:	e04c      	b.n	8002686 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <HAL_SPI_Transmit+0x18e>
 80025f4:	8afb      	ldrh	r3, [r7, #22]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d140      	bne.n	800267c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	330c      	adds	r3, #12
 8002604:	7812      	ldrb	r2, [r2, #0]
 8002606:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002620:	e02c      	b.n	800267c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b02      	cmp	r3, #2
 800262e:	d113      	bne.n	8002658 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	330c      	adds	r3, #12
 800263a:	7812      	ldrb	r2, [r2, #0]
 800263c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	86da      	strh	r2, [r3, #54]	; 0x36
 8002656:	e011      	b.n	800267c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002658:	f7fe ff02 	bl	8001460 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d803      	bhi.n	8002670 <HAL_SPI_Transmit+0x204>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266e:	d102      	bne.n	8002676 <HAL_SPI_Transmit+0x20a>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d102      	bne.n	800267c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	77fb      	strb	r3, [r7, #31]
          goto error;
 800267a:	e026      	b.n	80026ca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1cd      	bne.n	8002622 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	6839      	ldr	r1, [r7, #0]
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fb58 	bl	8002d40 <SPI_EndRxTxTransaction>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2220      	movs	r2, #32
 800269a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026a4:	2300      	movs	r3, #0
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	77fb      	strb	r3, [r7, #31]
 80026c6:	e000      	b.n	80026ca <HAL_SPI_Transmit+0x25e>
  }

error:
 80026c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026da:	7ffb      	ldrb	r3, [r7, #31]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3720      	adds	r7, #32
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08c      	sub	sp, #48	; 0x30
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026f2:	2301      	movs	r3, #1
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_SPI_TransmitReceive+0x26>
 8002706:	2302      	movs	r3, #2
 8002708:	e18a      	b.n	8002a20 <HAL_SPI_TransmitReceive+0x33c>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002712:	f7fe fea5 	bl	8001460 <HAL_GetTick>
 8002716:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800271e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002728:	887b      	ldrh	r3, [r7, #2]
 800272a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800272c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002730:	2b01      	cmp	r3, #1
 8002732:	d00f      	beq.n	8002754 <HAL_SPI_TransmitReceive+0x70>
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800273a:	d107      	bne.n	800274c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d103      	bne.n	800274c <HAL_SPI_TransmitReceive+0x68>
 8002744:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002748:	2b04      	cmp	r3, #4
 800274a:	d003      	beq.n	8002754 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800274c:	2302      	movs	r3, #2
 800274e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002752:	e15b      	b.n	8002a0c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <HAL_SPI_TransmitReceive+0x82>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <HAL_SPI_TransmitReceive+0x82>
 8002760:	887b      	ldrh	r3, [r7, #2]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d103      	bne.n	800276e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800276c:	e14e      	b.n	8002a0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b04      	cmp	r3, #4
 8002778:	d003      	beq.n	8002782 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2205      	movs	r2, #5
 800277e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	887a      	ldrh	r2, [r7, #2]
 8002792:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	887a      	ldrh	r2, [r7, #2]
 8002798:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	887a      	ldrh	r2, [r7, #2]
 80027a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	887a      	ldrh	r2, [r7, #2]
 80027aa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c2:	2b40      	cmp	r3, #64	; 0x40
 80027c4:	d007      	beq.n	80027d6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027de:	d178      	bne.n	80028d2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <HAL_SPI_TransmitReceive+0x10a>
 80027e8:	8b7b      	ldrh	r3, [r7, #26]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d166      	bne.n	80028bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	881a      	ldrh	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	1c9a      	adds	r2, r3, #2
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002812:	e053      	b.n	80028bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b02      	cmp	r3, #2
 8002820:	d11b      	bne.n	800285a <HAL_SPI_TransmitReceive+0x176>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002826:	b29b      	uxth	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d016      	beq.n	800285a <HAL_SPI_TransmitReceive+0x176>
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	2b01      	cmp	r3, #1
 8002830:	d113      	bne.n	800285a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	881a      	ldrh	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	1c9a      	adds	r2, r3, #2
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b01      	cmp	r3, #1
 8002866:	d119      	bne.n	800289c <HAL_SPI_TransmitReceive+0x1b8>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d014      	beq.n	800289c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	b292      	uxth	r2, r2
 800287e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002884:	1c9a      	adds	r2, r3, #2
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002898:	2301      	movs	r3, #1
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800289c:	f7fe fde0 	bl	8001460 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d807      	bhi.n	80028bc <HAL_SPI_TransmitReceive+0x1d8>
 80028ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b2:	d003      	beq.n	80028bc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80028ba:	e0a7      	b.n	8002a0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1a6      	bne.n	8002814 <HAL_SPI_TransmitReceive+0x130>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1a1      	bne.n	8002814 <HAL_SPI_TransmitReceive+0x130>
 80028d0:	e07c      	b.n	80029cc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_SPI_TransmitReceive+0x1fc>
 80028da:	8b7b      	ldrh	r3, [r7, #26]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d16b      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	330c      	adds	r3, #12
 80028ea:	7812      	ldrb	r2, [r2, #0]
 80028ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002906:	e057      	b.n	80029b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b02      	cmp	r3, #2
 8002914:	d11c      	bne.n	8002950 <HAL_SPI_TransmitReceive+0x26c>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d017      	beq.n	8002950 <HAL_SPI_TransmitReceive+0x26c>
 8002920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002922:	2b01      	cmp	r3, #1
 8002924:	d114      	bne.n	8002950 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	330c      	adds	r3, #12
 8002930:	7812      	ldrb	r2, [r2, #0]
 8002932:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d119      	bne.n	8002992 <HAL_SPI_TransmitReceive+0x2ae>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002962:	b29b      	uxth	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d014      	beq.n	8002992 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800298e:	2301      	movs	r3, #1
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002992:	f7fe fd65 	bl	8001460 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800299e:	429a      	cmp	r2, r3
 80029a0:	d803      	bhi.n	80029aa <HAL_SPI_TransmitReceive+0x2c6>
 80029a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a8:	d102      	bne.n	80029b0 <HAL_SPI_TransmitReceive+0x2cc>
 80029aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d103      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029b6:	e029      	b.n	8002a0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1a2      	bne.n	8002908 <HAL_SPI_TransmitReceive+0x224>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d19d      	bne.n	8002908 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f9b5 	bl	8002d40 <SPI_EndRxTxTransaction>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d006      	beq.n	80029ea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2220      	movs	r2, #32
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80029e8:	e010      	b.n	8002a0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10b      	bne.n	8002a0a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	e000      	b.n	8002a0c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002a0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3730      	adds	r7, #48	; 0x30
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	099b      	lsrs	r3, r3, #6
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10f      	bne.n	8002a6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	099b      	lsrs	r3, r3, #6
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
    return;
 8002a6a:	e0be      	b.n	8002bea <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	085b      	lsrs	r3, r3, #1
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_SPI_IRQHandler+0x66>
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	09db      	lsrs	r3, r3, #7
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d004      	beq.n	8002a8e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	4798      	blx	r3
    return;
 8002a8c:	e0ad      	b.n	8002bea <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <HAL_SPI_IRQHandler+0x80>
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	099b      	lsrs	r3, r3, #6
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 80a1 	beq.w	8002bea <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 809a 	beq.w	8002bea <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	099b      	lsrs	r3, r3, #6
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d023      	beq.n	8002b0a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d011      	beq.n	8002af2 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad2:	f043 0204 	orr.w	r2, r3, #4
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	e00b      	b.n	8002b0a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	693b      	ldr	r3, [r7, #16]
        return;
 8002b08:	e06f      	b.n	8002bea <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d014      	beq.n	8002b40 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1a:	f043 0201 	orr.w	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d04f      	beq.n	8002be8 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b56:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d104      	bne.n	8002b74 <HAL_SPI_IRQHandler+0x14c>
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d034      	beq.n	8002bde <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0203 	bic.w	r2, r2, #3
 8002b82:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d011      	beq.n	8002bb0 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b90:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <HAL_SPI_IRQHandler+0x1c8>)
 8002b92:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fe fd9d 	bl	80016d8 <HAL_DMA_Abort_IT>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d016      	beq.n	8002be6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bbc:	4a0c      	ldr	r2, [pc, #48]	; (8002bf0 <HAL_SPI_IRQHandler+0x1c8>)
 8002bbe:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe fd87 	bl	80016d8 <HAL_DMA_Abort_IT>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002bdc:	e003      	b.n	8002be6 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f808 	bl	8002bf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002be4:	e000      	b.n	8002be8 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8002be6:	bf00      	nop
    return;
 8002be8:	bf00      	nop
  }
}
 8002bea:	3720      	adds	r7, #32
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	08002c07 	.word	0x08002c07

08002bf4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f7ff ffe7 	bl	8002bf4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c40:	f7fe fc0e 	bl	8001460 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c50:	f7fe fc06 	bl	8001460 <HAL_GetTick>
 8002c54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c56:	4b39      	ldr	r3, [pc, #228]	; (8002d3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	015b      	lsls	r3, r3, #5
 8002c5c:	0d1b      	lsrs	r3, r3, #20
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c66:	e054      	b.n	8002d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6e:	d050      	beq.n	8002d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c70:	f7fe fbf6 	bl	8001460 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d902      	bls.n	8002c86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d13d      	bne.n	8002d02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c9e:	d111      	bne.n	8002cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca8:	d004      	beq.n	8002cb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb2:	d107      	bne.n	8002cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ccc:	d10f      	bne.n	8002cee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e017      	b.n	8002d32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d19b      	bne.n	8002c68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3720      	adds	r7, #32
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	2000001c 	.word	0x2000001c

08002d40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2200      	movs	r2, #0
 8002d54:	2180      	movs	r1, #128	; 0x80
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f7ff ff6a 	bl	8002c30 <SPI_WaitFlagStateUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d007      	beq.n	8002d72 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d66:	f043 0220 	orr.w	r2, r3, #32
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e000      	b.n	8002d74 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e041      	b.n	8002e12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fe fa2a 	bl	80011fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3304      	adds	r3, #4
 8002db8:	4619      	mov	r1, r3
 8002dba:	4610      	mov	r0, r2
 8002dbc:	f000 fa70 	bl	80032a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d001      	beq.n	8002e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e03a      	b.n	8002eaa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a18      	ldr	r2, [pc, #96]	; (8002eb4 <HAL_TIM_Base_Start_IT+0x98>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00e      	beq.n	8002e74 <HAL_TIM_Base_Start_IT+0x58>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5e:	d009      	beq.n	8002e74 <HAL_TIM_Base_Start_IT+0x58>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a14      	ldr	r2, [pc, #80]	; (8002eb8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d004      	beq.n	8002e74 <HAL_TIM_Base_Start_IT+0x58>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a13      	ldr	r2, [pc, #76]	; (8002ebc <HAL_TIM_Base_Start_IT+0xa0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d111      	bne.n	8002e98 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b06      	cmp	r3, #6
 8002e84:	d010      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0201 	orr.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e96:	e007      	b.n	8002ea8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	40012c00 	.word	0x40012c00
 8002eb8:	40000400 	.word	0x40000400
 8002ebc:	40000800 	.word	0x40000800

08002ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d122      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d11b      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0202 	mvn.w	r2, #2
 8002eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f9b1 	bl	800326a <HAL_TIM_IC_CaptureCallback>
 8002f08:	e005      	b.n	8002f16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f9a4 	bl	8003258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f9b3 	bl	800327c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d122      	bne.n	8002f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d11b      	bne.n	8002f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0204 	mvn.w	r2, #4
 8002f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2202      	movs	r2, #2
 8002f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f987 	bl	800326a <HAL_TIM_IC_CaptureCallback>
 8002f5c:	e005      	b.n	8002f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f97a 	bl	8003258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f989 	bl	800327c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d122      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d11b      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f06f 0208 	mvn.w	r2, #8
 8002f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2204      	movs	r2, #4
 8002f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f95d 	bl	800326a <HAL_TIM_IC_CaptureCallback>
 8002fb0:	e005      	b.n	8002fbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f950 	bl	8003258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f95f 	bl	800327c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b10      	cmp	r3, #16
 8002fd0:	d122      	bne.n	8003018 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d11b      	bne.n	8003018 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0210 	mvn.w	r2, #16
 8002fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2208      	movs	r2, #8
 8002fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f933 	bl	800326a <HAL_TIM_IC_CaptureCallback>
 8003004:	e005      	b.n	8003012 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f926 	bl	8003258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f935 	bl	800327c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d10e      	bne.n	8003044 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b01      	cmp	r3, #1
 8003032:	d107      	bne.n	8003044 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0201 	mvn.w	r2, #1
 800303c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd f98c 	bl	800035c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304e:	2b80      	cmp	r3, #128	; 0x80
 8003050:	d10e      	bne.n	8003070 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305c:	2b80      	cmp	r3, #128	; 0x80
 800305e:	d107      	bne.n	8003070 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fa77 	bl	800355e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307a:	2b40      	cmp	r3, #64	; 0x40
 800307c:	d10e      	bne.n	800309c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003088:	2b40      	cmp	r3, #64	; 0x40
 800308a:	d107      	bne.n	800309c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f8f9 	bl	800328e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	d10e      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d107      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0220 	mvn.w	r2, #32
 80030c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fa42 	bl	800354c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_TIM_ConfigClockSource+0x18>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e0b3      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x180>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003106:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800310e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003120:	d03e      	beq.n	80031a0 <HAL_TIM_ConfigClockSource+0xd0>
 8003122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003126:	f200 8087 	bhi.w	8003238 <HAL_TIM_ConfigClockSource+0x168>
 800312a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312e:	f000 8085 	beq.w	800323c <HAL_TIM_ConfigClockSource+0x16c>
 8003132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003136:	d87f      	bhi.n	8003238 <HAL_TIM_ConfigClockSource+0x168>
 8003138:	2b70      	cmp	r3, #112	; 0x70
 800313a:	d01a      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0xa2>
 800313c:	2b70      	cmp	r3, #112	; 0x70
 800313e:	d87b      	bhi.n	8003238 <HAL_TIM_ConfigClockSource+0x168>
 8003140:	2b60      	cmp	r3, #96	; 0x60
 8003142:	d050      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x116>
 8003144:	2b60      	cmp	r3, #96	; 0x60
 8003146:	d877      	bhi.n	8003238 <HAL_TIM_ConfigClockSource+0x168>
 8003148:	2b50      	cmp	r3, #80	; 0x50
 800314a:	d03c      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0xf6>
 800314c:	2b50      	cmp	r3, #80	; 0x50
 800314e:	d873      	bhi.n	8003238 <HAL_TIM_ConfigClockSource+0x168>
 8003150:	2b40      	cmp	r3, #64	; 0x40
 8003152:	d058      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x136>
 8003154:	2b40      	cmp	r3, #64	; 0x40
 8003156:	d86f      	bhi.n	8003238 <HAL_TIM_ConfigClockSource+0x168>
 8003158:	2b30      	cmp	r3, #48	; 0x30
 800315a:	d064      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0x156>
 800315c:	2b30      	cmp	r3, #48	; 0x30
 800315e:	d86b      	bhi.n	8003238 <HAL_TIM_ConfigClockSource+0x168>
 8003160:	2b20      	cmp	r3, #32
 8003162:	d060      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0x156>
 8003164:	2b20      	cmp	r3, #32
 8003166:	d867      	bhi.n	8003238 <HAL_TIM_ConfigClockSource+0x168>
 8003168:	2b00      	cmp	r3, #0
 800316a:	d05c      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0x156>
 800316c:	2b10      	cmp	r3, #16
 800316e:	d05a      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003170:	e062      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	6899      	ldr	r1, [r3, #8]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f000 f966 	bl	8003452 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003194:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	609a      	str	r2, [r3, #8]
      break;
 800319e:	e04e      	b.n	800323e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	6899      	ldr	r1, [r3, #8]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f000 f94f 	bl	8003452 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031c2:	609a      	str	r2, [r3, #8]
      break;
 80031c4:	e03b      	b.n	800323e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6859      	ldr	r1, [r3, #4]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f000 f8c6 	bl	8003364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2150      	movs	r1, #80	; 0x50
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f91d 	bl	800341e <TIM_ITRx_SetConfig>
      break;
 80031e4:	e02b      	b.n	800323e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6859      	ldr	r1, [r3, #4]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	461a      	mov	r2, r3
 80031f4:	f000 f8e4 	bl	80033c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2160      	movs	r1, #96	; 0x60
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 f90d 	bl	800341e <TIM_ITRx_SetConfig>
      break;
 8003204:	e01b      	b.n	800323e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	6859      	ldr	r1, [r3, #4]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	461a      	mov	r2, r3
 8003214:	f000 f8a6 	bl	8003364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2140      	movs	r1, #64	; 0x40
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f8fd 	bl	800341e <TIM_ITRx_SetConfig>
      break;
 8003224:	e00b      	b.n	800323e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4619      	mov	r1, r3
 8003230:	4610      	mov	r0, r2
 8003232:	f000 f8f4 	bl	800341e <TIM_ITRx_SetConfig>
        break;
 8003236:	e002      	b.n	800323e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003238:	bf00      	nop
 800323a:	e000      	b.n	800323e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800323c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr

0800326a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr

0800328e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a29      	ldr	r2, [pc, #164]	; (8003358 <TIM_Base_SetConfig+0xb8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00b      	beq.n	80032d0 <TIM_Base_SetConfig+0x30>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032be:	d007      	beq.n	80032d0 <TIM_Base_SetConfig+0x30>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a26      	ldr	r2, [pc, #152]	; (800335c <TIM_Base_SetConfig+0xbc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d003      	beq.n	80032d0 <TIM_Base_SetConfig+0x30>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a25      	ldr	r2, [pc, #148]	; (8003360 <TIM_Base_SetConfig+0xc0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d108      	bne.n	80032e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a1c      	ldr	r2, [pc, #112]	; (8003358 <TIM_Base_SetConfig+0xb8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00b      	beq.n	8003302 <TIM_Base_SetConfig+0x62>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f0:	d007      	beq.n	8003302 <TIM_Base_SetConfig+0x62>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a19      	ldr	r2, [pc, #100]	; (800335c <TIM_Base_SetConfig+0xbc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d003      	beq.n	8003302 <TIM_Base_SetConfig+0x62>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a18      	ldr	r2, [pc, #96]	; (8003360 <TIM_Base_SetConfig+0xc0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d108      	bne.n	8003314 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a07      	ldr	r2, [pc, #28]	; (8003358 <TIM_Base_SetConfig+0xb8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d103      	bne.n	8003348 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	615a      	str	r2, [r3, #20]
}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40000400 	.word	0x40000400
 8003360:	40000800 	.word	0x40000800

08003364 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f023 0201 	bic.w	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800338e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f023 030a 	bic.w	r3, r3, #10
 80033a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	621a      	str	r2, [r3, #32]
}
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f023 0210 	bic.w	r2, r3, #16
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	031b      	lsls	r3, r3, #12
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	621a      	str	r2, [r3, #32]
}
 8003414:	bf00      	nop
 8003416:	371c      	adds	r7, #28
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr

0800341e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800341e:	b480      	push	{r7}
 8003420:	b085      	sub	sp, #20
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003434:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4313      	orrs	r3, r2
 800343c:	f043 0307 	orr.w	r3, r3, #7
 8003440:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	609a      	str	r2, [r3, #8]
}
 8003448:	bf00      	nop
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003452:	b480      	push	{r7}
 8003454:	b087      	sub	sp, #28
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800346c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	021a      	lsls	r2, r3, #8
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	431a      	orrs	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4313      	orrs	r3, r2
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	609a      	str	r2, [r3, #8]
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e046      	b.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a16      	ldr	r2, [pc, #88]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00e      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f4:	d009      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a12      	ldr	r2, [pc, #72]	; (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a10      	ldr	r2, [pc, #64]	; (8003548 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d10c      	bne.n	8003524 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	4313      	orrs	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	40012c00 	.word	0x40012c00
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800

0800354c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr

0800355e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e03f      	b.n	8003602 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fe4c 	bl	8001234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2224      	movs	r2, #36	; 0x24
 80035a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 faeb 	bl	8003b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	4613      	mov	r3, r2
 8003616:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b20      	cmp	r3, #32
 8003622:	d130      	bne.n	8003686 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_UART_Transmit_IT+0x26>
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e029      	b.n	8003688 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_UART_Transmit_IT+0x38>
 800363e:	2302      	movs	r3, #2
 8003640:	e022      	b.n	8003688 <HAL_UART_Transmit_IT+0x7e>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	88fa      	ldrh	r2, [r7, #6]
 8003654:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	88fa      	ldrh	r2, [r7, #6]
 800365a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2221      	movs	r2, #33	; 0x21
 8003666:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003680:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e000      	b.n	8003688 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003686:	2302      	movs	r3, #2
  }
}
 8003688:	4618      	mov	r0, r3
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003692:	b480      	push	{r7}
 8003694:	b085      	sub	sp, #20
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	4613      	mov	r3, r2
 800369e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d140      	bne.n	800372e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_UART_Receive_IT+0x26>
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e039      	b.n	8003730 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_UART_Receive_IT+0x38>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e032      	b.n	8003730 <HAL_UART_Receive_IT+0x9e>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	88fa      	ldrh	r2, [r7, #6]
 80036dc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	88fa      	ldrh	r2, [r7, #6]
 80036e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2222      	movs	r2, #34	; 0x22
 80036ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003708:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695a      	ldr	r2, [r3, #20]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 0201 	orr.w	r2, r2, #1
 8003718:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0220 	orr.w	r2, r2, #32
 8003728:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	e000      	b.n	8003730 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800372e:	2302      	movs	r3, #2
  }
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr
	...

0800373c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10d      	bne.n	800378e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_UART_IRQHandler+0x52>
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f982 	bl	8003a90 <UART_Receive_IT>
      return;
 800378c:	e0d0      	b.n	8003930 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80b0 	beq.w	80038f6 <HAL_UART_IRQHandler+0x1ba>
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d105      	bne.n	80037ac <HAL_UART_IRQHandler+0x70>
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80a5 	beq.w	80038f6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_UART_IRQHandler+0x90>
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c4:	f043 0201 	orr.w	r2, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_UART_IRQHandler+0xb0>
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e4:	f043 0202 	orr.w	r2, r3, #2
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_UART_IRQHandler+0xd0>
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003804:	f043 0204 	orr.w	r2, r3, #4
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00f      	beq.n	8003836 <HAL_UART_IRQHandler+0xfa>
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <HAL_UART_IRQHandler+0xee>
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	f043 0208 	orr.w	r2, r3, #8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383a:	2b00      	cmp	r3, #0
 800383c:	d077      	beq.n	800392e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <HAL_UART_IRQHandler+0x11c>
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f91c 	bl	8003a90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	bf14      	ite	ne
 8003866:	2301      	movne	r3, #1
 8003868:	2300      	moveq	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d102      	bne.n	8003880 <HAL_UART_IRQHandler+0x144>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d031      	beq.n	80038e4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f86d 	bl	8003960 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003890:	2b00      	cmp	r3, #0
 8003892:	d023      	beq.n	80038dc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d013      	beq.n	80038d4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b0:	4a21      	ldr	r2, [pc, #132]	; (8003938 <HAL_UART_IRQHandler+0x1fc>)
 80038b2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fd ff0d 	bl	80016d8 <HAL_DMA_Abort_IT>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d016      	beq.n	80038f2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038ce:	4610      	mov	r0, r2
 80038d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d2:	e00e      	b.n	80038f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f83a 	bl	800394e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038da:	e00a      	b.n	80038f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f836 	bl	800394e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e2:	e006      	b.n	80038f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f832 	bl	800394e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80038f0:	e01d      	b.n	800392e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f2:	bf00      	nop
    return;
 80038f4:	e01b      	b.n	800392e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_UART_IRQHandler+0x1d6>
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f859 	bl	80039c2 <UART_Transmit_IT>
    return;
 8003910:	e00e      	b.n	8003930 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d009      	beq.n	8003930 <HAL_UART_IRQHandler+0x1f4>
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d004      	beq.n	8003930 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f89a 	bl	8003a60 <UART_EndTransmit_IT>
    return;
 800392c:	e000      	b.n	8003930 <HAL_UART_IRQHandler+0x1f4>
    return;
 800392e:	bf00      	nop
  }
}
 8003930:	3720      	adds	r7, #32
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	0800399b 	.word	0x0800399b

0800393c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr

0800394e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr

08003960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003976:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695a      	ldr	r2, [r3, #20]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0201 	bic.w	r2, r2, #1
 8003986:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr

0800399a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f7ff ffca 	bl	800394e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b085      	sub	sp, #20
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b21      	cmp	r3, #33	; 0x21
 80039d4:	d13e      	bne.n	8003a54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039de:	d114      	bne.n	8003a0a <UART_Transmit_IT+0x48>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d110      	bne.n	8003a0a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	1c9a      	adds	r2, r3, #2
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	621a      	str	r2, [r3, #32]
 8003a08:	e008      	b.n	8003a1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	1c59      	adds	r1, r3, #1
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6211      	str	r1, [r2, #32]
 8003a14:	781a      	ldrb	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	4619      	mov	r1, r3
 8003a2a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10f      	bne.n	8003a50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	e000      	b.n	8003a56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a54:	2302      	movs	r3, #2
  }
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff ff5b 	bl	800393c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b22      	cmp	r3, #34	; 0x22
 8003aa2:	d170      	bne.n	8003b86 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aac:	d117      	bne.n	8003ade <UART_Receive_IT+0x4e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d113      	bne.n	8003ade <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	1c9a      	adds	r2, r3, #2
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28
 8003adc:	e026      	b.n	8003b2c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af0:	d007      	beq.n	8003b02 <UART_Receive_IT+0x72>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10a      	bne.n	8003b10 <UART_Receive_IT+0x80>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	e008      	b.n	8003b22 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d120      	bne.n	8003b82 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0220 	bic.w	r2, r2, #32
 8003b4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0201 	bic.w	r2, r2, #1
 8003b6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7fc faf1 	bl	8000160 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e002      	b.n	8003b88 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	e000      	b.n	8003b88 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003b86:	2302      	movs	r3, #2
  }
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bca:	f023 030c 	bic.w	r3, r3, #12
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a2c      	ldr	r2, [pc, #176]	; (8003ca4 <UART_SetConfig+0x114>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d103      	bne.n	8003c00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bf8:	f7fe fb82 	bl	8002300 <HAL_RCC_GetPCLK2Freq>
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	e002      	b.n	8003c06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c00:	f7fe fb6a 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 8003c04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009a      	lsls	r2, r3, #2
 8003c10:	441a      	add	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1c:	4a22      	ldr	r2, [pc, #136]	; (8003ca8 <UART_SetConfig+0x118>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	0119      	lsls	r1, r3, #4
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009a      	lsls	r2, r3, #2
 8003c30:	441a      	add	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ca8 <UART_SetConfig+0x118>)
 8003c3e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	2064      	movs	r0, #100	; 0x64
 8003c46:	fb00 f303 	mul.w	r3, r0, r3
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	3332      	adds	r3, #50	; 0x32
 8003c50:	4a15      	ldr	r2, [pc, #84]	; (8003ca8 <UART_SetConfig+0x118>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c5c:	4419      	add	r1, r3
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	009a      	lsls	r2, r3, #2
 8003c68:	441a      	add	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c74:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <UART_SetConfig+0x118>)
 8003c76:	fba3 0302 	umull	r0, r3, r3, r2
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	2064      	movs	r0, #100	; 0x64
 8003c7e:	fb00 f303 	mul.w	r3, r0, r3
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	3332      	adds	r3, #50	; 0x32
 8003c88:	4a07      	ldr	r2, [pc, #28]	; (8003ca8 <UART_SetConfig+0x118>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	f003 020f 	and.w	r2, r3, #15
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	440a      	add	r2, r1
 8003c9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40013800 	.word	0x40013800
 8003ca8:	51eb851f 	.word	0x51eb851f

08003cac <__libc_init_array>:
 8003cac:	b570      	push	{r4, r5, r6, lr}
 8003cae:	2600      	movs	r6, #0
 8003cb0:	4d0c      	ldr	r5, [pc, #48]	; (8003ce4 <__libc_init_array+0x38>)
 8003cb2:	4c0d      	ldr	r4, [pc, #52]	; (8003ce8 <__libc_init_array+0x3c>)
 8003cb4:	1b64      	subs	r4, r4, r5
 8003cb6:	10a4      	asrs	r4, r4, #2
 8003cb8:	42a6      	cmp	r6, r4
 8003cba:	d109      	bne.n	8003cd0 <__libc_init_array+0x24>
 8003cbc:	f000 f822 	bl	8003d04 <_init>
 8003cc0:	2600      	movs	r6, #0
 8003cc2:	4d0a      	ldr	r5, [pc, #40]	; (8003cec <__libc_init_array+0x40>)
 8003cc4:	4c0a      	ldr	r4, [pc, #40]	; (8003cf0 <__libc_init_array+0x44>)
 8003cc6:	1b64      	subs	r4, r4, r5
 8003cc8:	10a4      	asrs	r4, r4, #2
 8003cca:	42a6      	cmp	r6, r4
 8003ccc:	d105      	bne.n	8003cda <__libc_init_array+0x2e>
 8003cce:	bd70      	pop	{r4, r5, r6, pc}
 8003cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd4:	4798      	blx	r3
 8003cd6:	3601      	adds	r6, #1
 8003cd8:	e7ee      	b.n	8003cb8 <__libc_init_array+0xc>
 8003cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cde:	4798      	blx	r3
 8003ce0:	3601      	adds	r6, #1
 8003ce2:	e7f2      	b.n	8003cca <__libc_init_array+0x1e>
 8003ce4:	08003d4c 	.word	0x08003d4c
 8003ce8:	08003d4c 	.word	0x08003d4c
 8003cec:	08003d4c 	.word	0x08003d4c
 8003cf0:	08003d50 	.word	0x08003d50

08003cf4 <memset>:
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	4402      	add	r2, r0
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d100      	bne.n	8003cfe <memset+0xa>
 8003cfc:	4770      	bx	lr
 8003cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8003d02:	e7f9      	b.n	8003cf8 <memset+0x4>

08003d04 <_init>:
 8003d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d06:	bf00      	nop
 8003d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0a:	bc08      	pop	{r3}
 8003d0c:	469e      	mov	lr, r3
 8003d0e:	4770      	bx	lr

08003d10 <_fini>:
 8003d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d12:	bf00      	nop
 8003d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d16:	bc08      	pop	{r3}
 8003d18:	469e      	mov	lr, r3
 8003d1a:	4770      	bx	lr
